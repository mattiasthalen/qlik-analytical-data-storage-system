Trace
---------------------------------------------------------------
    Defining frame__adventure_works__work_order_routings
---------------------------------------------------------------
;
Trace Setting variables...;
Let val__source_path = 'lib://DataFiles/Analytical Data Storage System/QVD/$(val__environment)/data_according_to_system/raw__adventure_works__work_order_routings.qvd';
Let val__target_path = '$(val__qvd_path__dab)/frame__adventure_works__work_order_routings.qvd';
Let val__source_create_time = Timestamp(FileTime('$(val__source_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_create_time = Timestamp(FileTime('$(val__target_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__source_is_newer = If('$(val__source_create_time)' > '$(val__target_create_time)', 1, 0);

Set var__hook__order_line__work = 'order_line__work__adventure_works|' & Text([operation_sequence]);
Set var__hook__order__work = 'order__work__adventure_works|' & Text([work_order_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__reference__location = 'reference__location__adventure_works|' & Text([location_id]);
Set var__hook__work_order_routing = $(var__hook__order_line__work) & '~' & $(var__hook__product) & '~' & $(var__hook__order__work);
Set var__record_version = Window(RecNo(), [operation_sequence], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [operation_sequence], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__work_order_routing = $(var__hook__work_order_routing) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(val__source_is_newer) = 1 Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__work_order_routings]:
    Load
        Text($(var__pit_hook__work_order_routing)) As [_pit_hook__work_order_routing],
        Text($(var__hook__work_order_routing)) As [_hook__work_order_routing],
        Text($(var__hook__order_line__work)) As [_hook__order_line__work],
        Text($(var__hook__order__work)) As [_hook__order__work],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__reference__location)) As [_hook__reference__location],
        Num#([work_order_id]) As [work_order_routing__work_order_id],
        Num#([product_id]) As [work_order_routing__product_id],
        Num#([operation_sequence]) As [work_order_routing__operation_sequence],
        Num#([location_id]) As [work_order_routing__location_id],
        Date(Num#([scheduled_start_date]), 'YYYY-MM-DD') As [work_order_routing__scheduled_start_date],
        Date(Num#([scheduled_end_date]), 'YYYY-MM-DD') As [work_order_routing__scheduled_end_date],
        Date(Num#([actual_start_date]), 'YYYY-MM-DD') As [work_order_routing__actual_start_date],
        Date(Num#([actual_end_date]), 'YYYY-MM-DD') As [work_order_routing__actual_end_date],
        Num#([actual_resource_hrs]) As [work_order_routing__actual_resource_hrs],
        Num#([planned_cost]) As [work_order_routing__planned_cost],
        Num#([actual_cost]) As [work_order_routing__actual_cost],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [work_order_routing__modified_date],
        Text([record_hash]) As [work_order_routing__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [work_order_routing__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [work_order_routing__record_updated_at],
        Num($(var__record_version)) As [work_order_routing__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [work_order_routing__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [work_order_routing__record_valid_to],
        Num($(var__is_current_record)) As [work_order_routing__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/$(val__environment)/data_according_to_system/raw__adventure_works__work_order_routings.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__work_order_routings] With 'Work order details.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__work_order_routing] With 'Point in time version of _hook__work_order_routing.';
    Comment Field [_hook__work_order_routing] With 'Composite hook using _hook__order_line__work and _hook__product and _hook__order__work.';
    Comment Field [_hook__order_line__work] With 'Hook for operation_sequence using keyset: order_line__work__adventure_works.';
    Comment Field [_hook__order__work] With 'Hook for work_order_id using keyset: order__work__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__reference__location] With 'Hook for location_id using keyset: reference__location__adventure_works.';
    Comment Field [work_order_routing__work_order_id] With 'Primary key. Foreign key to WorkOrder.WorkOrderID.';
    Comment Field [work_order_routing__product_id] With 'Primary key. Foreign key to Product.ProductID.';
    Comment Field [work_order_routing__operation_sequence] With 'Primary key. Indicates the manufacturing process sequence.';
    Comment Field [work_order_routing__location_id] With 'Manufacturing location where the part is processed. Foreign key to Location.LocationID.';
    Comment Field [work_order_routing__scheduled_start_date] With 'Planned manufacturing start date.';
    Comment Field [work_order_routing__scheduled_end_date] With 'Planned manufacturing end date.';
    Comment Field [work_order_routing__actual_start_date] With 'Actual start date.';
    Comment Field [work_order_routing__actual_end_date] With 'Actual end date.';
    Comment Field [work_order_routing__actual_resource_hrs] With 'Number of manufacturing hours used.';
    Comment Field [work_order_routing__planned_cost] With 'Estimated manufacturing cost.';
    Comment Field [work_order_routing__actual_cost] With 'Actual manufacturing cost.';
    Comment Field [work_order_routing__modified_date] With 'Date and time the record was last updated.';
    Comment Field [work_order_routing__record_hash] With 'Hash of the record.';
    Comment Field [work_order_routing__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [work_order_routing__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [work_order_routing__record_version] With 'Version of the record.';
    Comment Field [work_order_routing__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [work_order_routing__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [work_order_routing__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__work_order_routings] Into [$(val__qvd_path__dab)/frame__adventure_works__work_order_routings.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__work_order_routings];

Else
    Trace Source is older than target, skipping...;

End If

Trace Resetting variables...;
Let val__source_path = Null();
Let val__target_path = Null();
Let val__source_create_time = Null();
Let val__target_create_time = Null();
Let val__source_is_newer = Null();

Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__work_order_routing = Null();
Let var__hook__order_line__work = Null();
Let var__hook__order__work = Null();
Let var__hook__product = Null();
Let var__hook__reference__location = Null();
Let var__pit_hook__work_order_routing = Null();
