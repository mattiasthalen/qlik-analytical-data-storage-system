Trace
---------------------------------------------------------------
    Extracting raw__adventure_works__sales_order_headers
---------------------------------------------------------------
;
Trace Setting variables...;
Let val__source_path = 'lib://OneDrive - mattias.thalen@two.se/Qlik/Analytical Data Storage System/data/das.raw__adventure_works__sales_order_headers.parquet';
Let val__target_path = '$(val__qvd_path__das)/raw__adventure_works__sales_order_headers.qvd';
Let val__source_create_time = Timestamp(FileTime('$(val__source_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_create_time = Timestamp(FileTime('$(val__target_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_exists = If(Len('$(val__target_create_time)') > 0, 1, 0);
Let val__source_is_newer = If('$(val__source_create_time)' > '$(val__target_create_time)', 1, 0);
Let val__incremental_value = '1970-01-01';

If $(val__source_is_newer) = 1 Then
    Trace Source is newer, loading & transforming data...;

    Trace Define hash table...;
    [processed_record_hashes]:
    Load
        Null() As [old_record_hash]
    AutoGenerate 0
    ;

    Trace Checking if target QVD exists...;
    If $(val__target_exists) = 1 Then
        Trace Target found, loading hashes and max incremental value...;

        Concatenate([processed_record_hashes])
        Load
            [record_hash] As [old_record_hash]

        From
            [$(val__target_path)] (qvd)
        ;

        [max_incremental_value]:
        Load
            Date(Max(Num#([modified_date])), 'YYYY-MM-DD') As [max_incremental_value]
        From
            [$(val__target_path)] (qvd)
        ;

        Let val__incremental_value = Coalesce(Peek('max_incremental_value', -1, 'max_incremental_value'), '$(val__incremental_value)');
        Drop Table [max_incremental_value];

    Else
        Trace Target not found, starting full load...;

    End If

    Trace Loading new data with incremental value $(val__incremental_value)...;
    Set var__record_hash = Hash256(
        [bill_to_address_id],
        [credit_card_id],
        [currency_rate_id],
        [customer_id],
        [sales_order_id],
        [sales_person_id],
        [ship_method_id],
        [ship_to_address_id],
        [territory_id],
        [account_number],
        [credit_card_approval_code],
        [due_date],
        [freight],
        [online_order_flag],
        [order_date],
        [purchase_order_number],
        [revision_number],
        [sales_order_number],
        [ship_date],
        [status],
        [sub_total],
        [tax_amt],
        [total_due],
        [modified_date],
        [rowguid]
    )
    ;

    [raw__adventure_works__sales_order_headers]:
    Load
        Text([bill_to_address_id]) As [bill_to_address_id],
        Text([credit_card_id]) As [credit_card_id],
        Text([currency_rate_id]) As [currency_rate_id],
        Text([customer_id]) As [customer_id],
        Text([sales_order_id]) As [sales_order_id],
        Text([sales_person_id]) As [sales_person_id],
        Text([ship_method_id]) As [ship_method_id],
        Text([ship_to_address_id]) As [ship_to_address_id],
        Text([territory_id]) As [territory_id],
        Text([account_number]) As [account_number],
        Text([credit_card_approval_code]) As [credit_card_approval_code],
        Text([due_date]) As [due_date],
        Text([freight]) As [freight],
        Text([online_order_flag]) As [online_order_flag],
        Text([order_date]) As [order_date],
        Text([purchase_order_number]) As [purchase_order_number],
        Text([revision_number]) As [revision_number],
        Text([sales_order_number]) As [sales_order_number],
        Text([ship_date]) As [ship_date],
        Text([status]) As [status],
        Text([sub_total]) As [sub_total],
        Text([tax_amt]) As [tax_amt],
        Text([total_due]) As [total_due],
        Text([modified_date]) As [modified_date],
        Text([rowguid]) As [rowguid],
        $(var__record_hash) As [record_hash],
        Timestamp#('$(val__utc)', 'YYYY-MM-DD hh:mm:ss.fff') As [record_loaded_at]

    From
        [$(val__source_path)] (parquet)

    Where
        1 = 1
        And Date([modified_date], 'YYYY-MM-DD') >= Date#('$(val__incremental_value)', 'YYYY-MM-DD')
        And Not Exists ([old_record_hash], $(var__record_hash))
    ;

    Trace Dropping hash table...;
    Drop Table [processed_record_hashes];

    Trace Counting new records...;
    Set val__no_of_new_records = Alt(NoOfRows('raw__adventure_works__sales_order_headers'), 0);

    Trace Checking if there are new records...;
    If $(val__no_of_new_records) > 0 Then

        Trace Checking if target QVD exists...;
        If $(val__target_exists) = 1 Then
            Trace Appending previously ingested data...;

            Concatenate([raw__adventure_works__sales_order_headers])
            Load * From [$(val__target_path)] (qvd) Where Not Exists ([record_hash]);

        Else
            Trace Target not found, skipping append...;

        End If

        Trace Commenting table...;
        Comment Table [raw__adventure_works__sales_order_headers] With 'General sales order information.';

        Trace Commenting fields...;
        Comment Field [bill_to_address_id] With 'Customer billing address. Foreign key to Address.AddressID.';
        Comment Field [credit_card_id] With 'Credit card identification number. Foreign key to CreditCard.CreditCardID.';
        Comment Field [currency_rate_id] With 'Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.';
        Comment Field [customer_id] With 'Customer identification number. Foreign key to Customer.BusinessEntityID.';
        Comment Field [sales_order_id] With 'Primary key.';
        Comment Field [sales_person_id] With 'Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.';
        Comment Field [ship_method_id] With 'Shipping method. Foreign key to ShipMethod.ShipMethodID.';
        Comment Field [ship_to_address_id] With 'Customer shipping address. Foreign key to Address.AddressID.';
        Comment Field [territory_id] With 'Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.';
        Comment Field [account_number] With 'Financial accounting number reference.';
        Comment Field [credit_card_approval_code] With 'Approval code provided by the credit card company.';
        Comment Field [due_date] With 'Date the order is due to the customer.';
        Comment Field [freight] With 'Shipping cost.';
        Comment Field [online_order_flag] With '0 = Order placed by sales person. 1 = Order placed online by customer.';
        Comment Field [order_date] With 'Dates the sales order was created.';
        Comment Field [purchase_order_number] With 'Customer purchase order number reference.';
        Comment Field [revision_number] With 'Incremental number to track changes to the sales order over time.';
        Comment Field [sales_order_number] With 'Unique sales order identification number.';
        Comment Field [ship_date] With 'Date the order was shipped to the customer.';
        Comment Field [status] With 'Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled.';
        Comment Field [sub_total] With 'Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal) for the appropriate SalesOrderID.';
        Comment Field [tax_amt] With 'Tax amount.';
        Comment Field [total_due] With 'Total due from customer. Computed as Subtotal + TaxAmt + Freight.';
        Comment Field [modified_date] With 'Date and time the record was last updated.';
        Comment Field [rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
        Comment Field [record_hash] With 'Hash of the record, used for deduplication.';
        Comment Field [record_loaded_at] With 'Timestamp when the record was loaded.';

        Trace Storing data...;
        Store [raw__adventure_works__sales_order_headers] Into [$(val__qvd_path__das)/raw__adventure_works__sales_order_headers.qvd] (qvd);

    Else
        Trace No new records loaded...;

    End If

    Trace Dropping table...;
    Drop Table [raw__adventure_works__sales_order_headers];

Else
    Trace Source is older than target, skipping...;

End If

Trace Resetting variables...;
Let val__source_path = Null();
Let val__target_path = Null();
Let var__source_create_time = Null();
Let var__target_create_time = Null();
Let val__target_exists = Null();
Let val__source_is_newer = Null();
Let val__incremental_value = Null();
Let var__record_hash = Null();
Let val__no_of_new_records = Null();
