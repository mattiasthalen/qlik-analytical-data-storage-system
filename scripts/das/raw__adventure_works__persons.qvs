Trace
---------------------------------------------------------------
    Extracting raw__adventure_works__persons
---------------------------------------------------------------
;
Trace Setting variables...;
Let val__source_path = 'lib://OneDrive - mattias.thalen@two.se/Qlik/Analytical Data Storage System/data/das.raw__adventure_works__persons.parquet';
Let val__target_path = '$(val__qvd_path__das)/raw__adventure_works__persons.qvd';
Let val__source_create_time = Timestamp(FileTime('$(val__source_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_create_time = Timestamp(FileTime('$(val__target_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_exists = If(Len('$(val__target_create_time)') > 0, 1, 0);
Let val__source_is_newer = If('$(val__source_create_time)' > '$(val__target_create_time)', 1, 0);
Let val__incremental_value = '1970-01-01';

If $(val__source_is_newer) = 1 Then
    Trace Source is newer, loading & transforming data...;

    Trace Define hash table...;
    [processed_record_hashes]:
    Load
        Null() As [old_record_hash]
    AutoGenerate 0
    ;

    Trace Checking if target QVD exists...;
    If $(val__target_exists) = 1 Then
        Trace Target found, loading hashes and max incremental value...;

        Concatenate([processed_record_hashes])
        Load
            [record_hash] As [old_record_hash]

        From
            [$(val__target_path)] (qvd)
        ;

        [max_incremental_value]:
        Load
            Date(Max(Num#([modified_date])), 'YYYY-MM-DD') As [max_incremental_value]
        From
            [$(val__target_path)] (qvd)
        ;

        Let val__incremental_value = Coalesce(Peek('max_incremental_value', -1, 'max_incremental_value'), '$(val__incremental_value)');
        Drop Table [max_incremental_value];

    Else
        Trace Target not found, starting full load...;

    End If

    Trace Loading new data with incremental value $(val__incremental_value)...;
    Set var__record_hash = Hash256(
        [business_entity_id],
        [additional_contact_info],
        [demographics],
        [email_promotion],
        [first_name],
        [last_name],
        [middle_name],
        [name_style],
        [person_type],
        [suffix],
        [title],
        [modified_date],
        [rowguid]
    )
    ;

    [raw__adventure_works__persons]:
    Load
        Text([business_entity_id]) As [business_entity_id],
        Text([additional_contact_info]) As [additional_contact_info],
        Text([demographics]) As [demographics],
        Text([email_promotion]) As [email_promotion],
        Text([first_name]) As [first_name],
        Text([last_name]) As [last_name],
        Text([middle_name]) As [middle_name],
        Text([name_style]) As [name_style],
        Text([person_type]) As [person_type],
        Text([suffix]) As [suffix],
        Text([title]) As [title],
        Text([modified_date]) As [modified_date],
        Text([rowguid]) As [rowguid],
        $(var__record_hash) As [record_hash],
        Timestamp#('$(val__utc)', 'YYYY-MM-DD hh:mm:ss.fff') As [record_loaded_at]

    From
        [$(val__source_path)] (parquet)

    Where
        1 = 1
        And Date([modified_date], 'YYYY-MM-DD') >= Date#('$(val__incremental_value)', 'YYYY-MM-DD')
        And Not Exists ([old_record_hash], $(var__record_hash))
    ;

    Trace Dropping hash table...;
    Drop Table [processed_record_hashes];

    Trace Counting new records...;
    Set val__no_of_new_records = Alt(NoOfRows('raw__adventure_works__persons'), 0);

    Trace Checking if there are new records...;
    If $(val__no_of_new_records) > 0 Then

        Trace Checking if target QVD exists...;
        If $(val__target_exists) = 1 Then
            Trace Appending previously ingested data...;

            Concatenate([raw__adventure_works__persons])
            Load * From [$(val__target_path)] (qvd) Where Not Exists ([record_hash]);

        Else
            Trace Target not found, skipping append...;

        End If

        Trace Commenting table...;
        Comment Table [raw__adventure_works__persons] With 'Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.';

        Trace Commenting fields...;
        Comment Field [business_entity_id] With 'Primary key for Person records.';
        Comment Field [additional_contact_info] With 'Additional contact information about the person stored in xml format.';
        Comment Field [demographics] With 'Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.';
        Comment Field [email_promotion] With '0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.';
        Comment Field [first_name] With 'First name of the person.';
        Comment Field [last_name] With 'Last name of the person.';
        Comment Field [middle_name] With 'Middle name or middle initial of the person.';
        Comment Field [name_style] With '0 = The data in FirstName and LastName are stored in western style (first name, last name) order. 1 = Eastern style (last name, first name) order.';
        Comment Field [person_type] With 'Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact.';
        Comment Field [suffix] With 'Surname suffix. For example, Sr. or Jr.';
        Comment Field [title] With 'A courtesy title. For example, Mr. or Ms.';
        Comment Field [modified_date] With 'Date and time the record was last updated.';
        Comment Field [rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
        Comment Field [record_hash] With 'Hash of the record, used for deduplication.';
        Comment Field [record_loaded_at] With 'Timestamp when the record was loaded.';

        Trace Storing data...;
        Store [raw__adventure_works__persons] Into [$(val__qvd_path__das)/raw__adventure_works__persons.qvd] (qvd);

    Else
        Trace No new records loaded...;

    End If

    Trace Dropping table...;
    Drop Table [raw__adventure_works__persons];

Else
    Trace Source is older than target, skipping...;

End If

Trace Resetting variables...;
Let val__source_path = Null();
Let val__target_path = Null();
Let var__source_create_time = Null();
Let var__target_create_time = Null();
Let val__target_exists = Null();
Let val__source_is_newer = Null();
Let val__incremental_value = Null();
Let var__record_hash = Null();
Let val__no_of_new_records = Null();
