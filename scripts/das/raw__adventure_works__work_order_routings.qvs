Trace
---------------------------------------------------------------
    Extracting raw__adventure_works__work_order_routings
---------------------------------------------------------------
;
Trace Setting variables...;
Let val__source_path = 'lib://OneDrive - mattias.thalen@two.se/Qlik/Analytical Data Storage System/data/das.raw__adventure_works__work_order_routings.parquet';
Let val__target_path = '$(val__qvd_path__das)/raw__adventure_works__work_order_routings.qvd';
Let val__source_create_time = Timestamp(FileTime('$(val__source_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_create_time = Timestamp(FileTime('$(val__target_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_exists = If(Len('$(val__target_create_time)') > 0, 1, 0);
Let val__source_is_newer = If('$(val__source_create_time)' > '$(val__target_create_time)', 1, 0);
Let val__incremental_value = '1970-01-01';

If $(val__source_is_newer) = 1 Then
    Trace Source is newer, loading & transforming data...;

    Trace Define hash table...;
    [processed_record_hashes]:
    Load
        Null() As [old_record_hash]
    AutoGenerate 0
    ;

    Trace Checking if target QVD exists...;
    If $(val__target_exists) = 1 Then
        Trace Target found, loading hashes and max incremental value...;

        Concatenate([processed_record_hashes])
        Load
            [record_hash] As [old_record_hash]

        From
            [$(val__target_path)] (qvd)
        ;

        [max_incremental_value]:
        Load
            Date(Max(Num#([modified_date])), 'YYYY-MM-DD') As [max_incremental_value]
        From
            [$(val__target_path)] (qvd)
        ;

        Let val__incremental_value = Coalesce(Peek('max_incremental_value', -1, 'max_incremental_value'), '$(val__incremental_value)');
        Drop Table [max_incremental_value];

    Else
        Trace Target not found, starting full load...;

    End If

    Trace Loading new data with incremental value $(val__incremental_value)...;
    Set var__record_hash = Hash256(
        [location_id],
        [product_id],
        [work_order_id],
        [actual_cost],
        [actual_end_date],
        [actual_resource_hrs],
        [actual_start_date],
        [operation_sequence],
        [planned_cost],
        [scheduled_end_date],
        [scheduled_start_date],
        [modified_date]
    )
    ;

    [raw__adventure_works__work_order_routings]:
    Load
        Text([location_id]) As [location_id],
        Text([product_id]) As [product_id],
        Text([work_order_id]) As [work_order_id],
        Text([actual_cost]) As [actual_cost],
        Text([actual_end_date]) As [actual_end_date],
        Text([actual_resource_hrs]) As [actual_resource_hrs],
        Text([actual_start_date]) As [actual_start_date],
        Text([operation_sequence]) As [operation_sequence],
        Text([planned_cost]) As [planned_cost],
        Text([scheduled_end_date]) As [scheduled_end_date],
        Text([scheduled_start_date]) As [scheduled_start_date],
        Text([modified_date]) As [modified_date],
        $(var__record_hash) As [record_hash],
        Timestamp#('$(val__utc)', 'YYYY-MM-DD hh:mm:ss.fff') As [record_loaded_at]

    From
        [$(val__source_path)] (parquet)

    Where
        1 = 1
        And Date([modified_date], 'YYYY-MM-DD') >= Date#('$(val__incremental_value)', 'YYYY-MM-DD')
        And Not Exists ([old_record_hash], $(var__record_hash))
    ;

    Trace Dropping hash table...;
    Drop Table [processed_record_hashes];

    Trace Counting new records...;
    Set val__no_of_new_records = Alt(NoOfRows('raw__adventure_works__work_order_routings'), 0);

    Trace Checking if there are new records...;
    If $(val__no_of_new_records) > 0 Then

        Trace Checking if target QVD exists...;
        If $(val__target_exists) = 1 Then
            Trace Appending previously ingested data...;

            Concatenate([raw__adventure_works__work_order_routings])
            Load * From [$(val__target_path)] (qvd) Where Not Exists ([record_hash]);

        Else
            Trace Target not found, skipping append...;

        End If

        Trace Commenting table...;
        Comment Table [raw__adventure_works__work_order_routings] With 'Work order details.';

        Trace Commenting fields...;
        Comment Field [location_id] With 'Manufacturing location where the part is processed. Foreign key to Location.LocationID.';
        Comment Field [product_id] With 'Primary key. Foreign key to Product.ProductID.';
        Comment Field [work_order_id] With 'Primary key. Foreign key to WorkOrder.WorkOrderID.';
        Comment Field [actual_cost] With 'Actual manufacturing cost.';
        Comment Field [actual_end_date] With 'Actual end date.';
        Comment Field [actual_resource_hrs] With 'Number of manufacturing hours used.';
        Comment Field [actual_start_date] With 'Actual start date.';
        Comment Field [operation_sequence] With 'Primary key. Indicates the manufacturing process sequence.';
        Comment Field [planned_cost] With 'Estimated manufacturing cost.';
        Comment Field [scheduled_end_date] With 'Planned manufacturing end date.';
        Comment Field [scheduled_start_date] With 'Planned manufacturing start date.';
        Comment Field [modified_date] With 'Date and time the record was last updated.';
        Comment Field [record_hash] With 'Hash of the record, used for deduplication.';
        Comment Field [record_loaded_at] With 'Timestamp when the record was loaded.';

        Trace Storing data...;
        Store [raw__adventure_works__work_order_routings] Into [$(val__qvd_path__das)/raw__adventure_works__work_order_routings.qvd] (qvd);

    Else
        Trace No new records loaded...;

    End If

    Trace Dropping table...;
    Drop Table [raw__adventure_works__work_order_routings];

Else
    Trace Source is older than target, skipping...;

End If

Trace Resetting variables...;
Let val__source_path = Null();
Let val__target_path = Null();
Let var__source_create_time = Null();
Let var__target_create_time = Null();
Let val__target_exists = Null();
Let val__source_is_newer = Null();
Let val__incremental_value = Null();
Let var__record_hash = Null();
Let val__no_of_new_records = Null();
