Trace
---------------------------------------------------------------
    Extracting raw__adventure_works__employees
---------------------------------------------------------------
;
Trace Setting variables...;
Let val__source_path = 'lib://OneDrive - mattias.thalen@two.se/Qlik/Analytical Data Storage System/data/das.raw__adventure_works__employees.parquet';
Let val__target_path = '$(val__qvd_path__das)/raw__adventure_works__employees.qvd';
Let val__source_create_time = Timestamp(FileTime('$(val__source_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_create_time = Timestamp(FileTime('$(val__target_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_exists = If(Len('$(val__target_create_time)') > 0, 1, 0);
Let val__source_is_newer = If('$(val__source_create_time)' > '$(val__target_create_time)', 1, 0);
Let val__incremental_value = '1970-01-01';

If $(val__source_is_newer) = 1 Then
    Trace Source is newer, loading & transforming data...;

    Trace Define hash table...;
    [processed_record_hashes]:
    Load
        Null() As [old_record_hash]
    AutoGenerate 0
    ;

    Trace Checking if target QVD exists...;
    If $(val__target_exists) = 1 Then
        Trace Target found, loading hashes and max incremental value...;

        Concatenate([processed_record_hashes])
        Load
            [record_hash] As [old_record_hash]

        From
            [$(val__target_path)] (qvd)
        ;

        [max_incremental_value]:
        Load
            Date(Max(Num#([modified_date])), 'YYYY-MM-DD') As [max_incremental_value]
        From
            [$(val__target_path)] (qvd)
        ;

        Let val__incremental_value = Coalesce(Peek('max_incremental_value', -1, 'max_incremental_value'), '$(val__incremental_value)');
        Drop Table [max_incremental_value];

    Else
        Trace Target not found, starting full load...;

    End If

    Trace Loading new data with incremental value $(val__incremental_value)...;
    Set var__record_hash = Hash256(
        [business_entity_id],
        [login_id],
        [birth_date],
        [current_flag],
        [gender],
        [hire_date],
        [job_title],
        [marital_status],
        [national_idnumber],
        [organization_level],
        [salaried_flag],
        [sick_leave_hours],
        [vacation_hours],
        [modified_date],
        [rowguid]
    )
    ;

    [raw__adventure_works__employees]:
    Load
        Text([business_entity_id]) As [business_entity_id],
        Text([login_id]) As [login_id],
        Text([birth_date]) As [birth_date],
        Text([current_flag]) As [current_flag],
        Text([gender]) As [gender],
        Text([hire_date]) As [hire_date],
        Text([job_title]) As [job_title],
        Text([marital_status]) As [marital_status],
        Text([national_idnumber]) As [national_idnumber],
        Text([organization_level]) As [organization_level],
        Text([salaried_flag]) As [salaried_flag],
        Text([sick_leave_hours]) As [sick_leave_hours],
        Text([vacation_hours]) As [vacation_hours],
        Text([modified_date]) As [modified_date],
        Text([rowguid]) As [rowguid],
        $(var__record_hash) As [record_hash],
        Timestamp#('$(val__utc)', 'YYYY-MM-DD hh:mm:ss.fff') As [record_loaded_at]

    From
        [$(val__source_path)] (parquet)

    Where
        1 = 1
        And Date([modified_date], 'YYYY-MM-DD') >= Date#('$(val__incremental_value)', 'YYYY-MM-DD')
        And Not Exists ([old_record_hash], $(var__record_hash))
    ;

    Trace Dropping hash table...;
    Drop Table [processed_record_hashes];

    Trace Counting new records...;
    Set val__no_of_new_records = Alt(NoOfRows('raw__adventure_works__employees'), 0);

    Trace Checking if there are new records...;
    If $(val__no_of_new_records) > 0 Then

        Trace Checking if target QVD exists...;
        If $(val__target_exists) = 1 Then
            Trace Appending previously ingested data...;

            Concatenate([raw__adventure_works__employees])
            Load * From [$(val__target_path)] (qvd) Where Not Exists ([record_hash]);

        Else
            Trace Target not found, skipping append...;

        End If

        Trace Commenting table...;
        Comment Table [raw__adventure_works__employees] With 'Employee information.';

        Trace Commenting fields...;
        Comment Field [business_entity_id] With 'Primary key for Employee records. Foreign key to BusinessEntity.BusinessEntityID.';
        Comment Field [login_id] With 'Network login.';
        Comment Field [birth_date] With 'Date of birth.';
        Comment Field [current_flag] With '0 = Inactive, 1 = Active.';
        Comment Field [gender] With 'M = Male, F = Female.';
        Comment Field [hire_date] With 'Employee hired on this date.';
        Comment Field [job_title] With 'Work title such as Buyer or Sales Representative.';
        Comment Field [marital_status] With 'M = Married, S = Single.';
        Comment Field [national_idnumber] With 'Unique national identification number such as a social security number.';
        Comment Field [organization_level] With 'The depth of the employee in the corporate hierarchy.';
        Comment Field [salaried_flag] With 'Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.';
        Comment Field [sick_leave_hours] With 'Number of available sick leave hours.';
        Comment Field [vacation_hours] With 'Number of available vacation hours.';
        Comment Field [modified_date] With 'Date and time the record was last updated.';
        Comment Field [rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
        Comment Field [record_hash] With 'Hash of the record, used for deduplication.';
        Comment Field [record_loaded_at] With 'Timestamp when the record was loaded.';

        Trace Storing data...;
        Store [raw__adventure_works__employees] Into [$(val__qvd_path__das)/raw__adventure_works__employees.qvd] (qvd);

    Else
        Trace No new records loaded...;

    End If

    Trace Dropping table...;
    Drop Table [raw__adventure_works__employees];

Else
    Trace Source is older than target, skipping...;

End If

Trace Resetting variables...;
Let val__source_path = Null();
Let val__target_path = Null();
Let var__source_create_time = Null();
Let var__target_create_time = Null();
Let val__target_exists = Null();
Let val__source_is_newer = Null();
Let val__incremental_value = Null();
Let var__record_hash = Null();
Let val__no_of_new_records = Null();
