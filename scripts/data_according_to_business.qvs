Trace
===============================================================
    DATA ACCORDING TO BUSINESS
    Script generated by Qlik Script Generator
===============================================================
;
Trace
---------------------------------------------------------------
    Defining frame__adventure_works__address_types
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__address_types.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__address_types.qvd]);
Set var__hook__reference__address_type = 'reference__address_type__adventure_works|' & Text([address_type_id]);
Set var__record_version = Window(RecNo(), [address_type_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [address_type_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__address_type = $(var__hook__reference__address_type) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__address_types]:
    Load
        Text($(var__pit_hook__reference__address_type)) As [_pit_hook__reference__address_type],
        Text($(var__hook__reference__address_type)) As [_hook__reference__address_type],
        Num#([address_type_id]) As [address_type__address_type_id],
        Text([name]) As [address_type__name],
        Text([rowguid]) As [address_type__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [address_type__modified_date],
        Text([record_hash]) As [address_type__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [address_type__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [address_type__record_updated_at],
        Num($(var__record_version)) As [address_type__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [address_type__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [address_type__record_valid_to],
        Num($(var__is_current_record)) As [address_type__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__address_types.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__address_types] With 'Types of addresses stored in the Address table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__address_type] With 'Point in time version of _hook__reference__address_type.';
    Comment Field [_hook__reference__address_type] With 'Hook for address_type_id using keyset: reference__address_type__adventure_works.';
    Comment Field [address_type__address_type_id] With 'Primary key for AddressType records.';
    Comment Field [address_type__name] With 'Address type description. For example, Billing, Home, or Shipping.';
    Comment Field [address_type__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [address_type__modified_date] With 'Date and time the record was last updated.';
    Comment Field [address_type__record_hash] With 'Hash of the record.';
    Comment Field [address_type__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [address_type__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [address_type__record_version] With 'Version of the record.';
    Comment Field [address_type__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [address_type__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [address_type__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__address_types] Into [$(val__qvd_path__dab)/frame__adventure_works__address_types.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__address_types];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__address_type = Null();
Let var__pit_hook__reference__address_type = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__addresses
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__addresses.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__addresses.qvd]);
Set var__hook__address = 'address__adventure_works|' & Text([address_id]);
Set var__hook__reference__state_province = 'reference__state_province__adventure_works|' & Text([state_province_id]);
Set var__record_version = Window(RecNo(), [address_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [address_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__address = $(var__hook__address) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__addresses]:
    Load
        Text($(var__pit_hook__address)) As [_pit_hook__address],
        Text($(var__hook__address)) As [_hook__address],
        Text($(var__hook__reference__state_province)) As [_hook__reference__state_province],
        Num#([address_id]) As [address__address_id],
        Text([address_line1]) As [address__address_line1],
        Text([city]) As [address__city],
        Num#([state_province_id]) As [address__state_province_id],
        Text([postal_code]) As [address__postal_code],
        Text([rowguid]) As [address__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [address__modified_date],
        Text([address_line2]) As [address__address_line2],
        Text([record_hash]) As [address__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [address__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [address__record_updated_at],
        Num($(var__record_version)) As [address__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [address__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [address__record_valid_to],
        Num($(var__is_current_record)) As [address__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__addresses.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__addresses] With 'Street address information for customers, employees, and vendors.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__address] With 'Point in time version of _hook__address.';
    Comment Field [_hook__address] With 'Hook for address_id using keyset: address__adventure_works.';
    Comment Field [_hook__reference__state_province] With 'Hook for state_province_id using keyset: reference__state_province__adventure_works.';
    Comment Field [address__address_id] With 'Primary key for Address records.';
    Comment Field [address__address_line1] With 'First street address line.';
    Comment Field [address__city] With 'Name of the city.';
    Comment Field [address__state_province_id] With 'Unique identification number for the state or province. Foreign key to StateProvince table.';
    Comment Field [address__postal_code] With 'Postal code for the street address.';
    Comment Field [address__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [address__modified_date] With 'Date and time the record was last updated.';
    Comment Field [address__address_line2] With 'Second street address line.';
    Comment Field [address__record_hash] With 'Hash of the record.';
    Comment Field [address__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [address__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [address__record_version] With 'Version of the record.';
    Comment Field [address__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [address__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [address__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__addresses] Into [$(val__qvd_path__dab)/frame__adventure_works__addresses.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__addresses];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__address = Null();
Let var__hook__reference__state_province = Null();
Let var__pit_hook__address = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__bill_of_materials
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__bill_of_materials.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__bill_of_materials.qvd]);
Set var__hook__bill_of_materials = 'product__adventure_works|' & Text([bill_of_materials_id]);
Set var__hook__product__assembly = 'product__adventure_works|' & Text([product_assembly_id]);
Set var__hook__product__component = 'product__adventure_works|' & Text([component_id]);
Set var__hook__reference__unit_measure = 'reference__unit_measure__adventure_works|' & Text([unit_measure_code]);
Set var__record_version = Window(RecNo(), [bill_of_materials_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [bill_of_materials_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__bill_of_materials = $(var__hook__bill_of_materials) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__bill_of_materials]:
    Load
        Text($(var__pit_hook__bill_of_materials)) As [_pit_hook__bill_of_materials],
        Text($(var__hook__bill_of_materials)) As [_hook__bill_of_materials],
        Text($(var__hook__product__assembly)) As [_hook__product__assembly],
        Text($(var__hook__product__component)) As [_hook__product__component],
        Text($(var__hook__reference__unit_measure)) As [_hook__reference__unit_measure],
        Num#([bill_of_materials_id]) As [bill_of_material__bill_of_materials_id],
        Num#([product_assembly_id]) As [bill_of_material__product_assembly_id],
        Num#([component_id]) As [bill_of_material__component_id],
        Date(Num#([start_date]), 'YYYY-MM-DD') As [bill_of_material__start_date],
        Text([unit_measure_code]) As [bill_of_material__unit_measure_code],
        Num#([bomlevel]) As [bill_of_material__bomlevel],
        Num#([per_assembly_qty]) As [bill_of_material__per_assembly_qty],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [bill_of_material__modified_date],
        Date(Num#([end_date]), 'YYYY-MM-DD') As [bill_of_material__end_date],
        Text([record_hash]) As [bill_of_material__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [bill_of_material__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [bill_of_material__record_updated_at],
        Num($(var__record_version)) As [bill_of_material__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [bill_of_material__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [bill_of_material__record_valid_to],
        Num($(var__is_current_record)) As [bill_of_material__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__bill_of_materials.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__bill_of_materials] With 'Items required to make bicycles and bicycle subassemblies. It identifies the hierarchical relationship between a parent product and its components.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__bill_of_materials] With 'Point in time version of _hook__bill_of_materials.';
    Comment Field [_hook__bill_of_materials] With 'Hook for bill_of_materials_id using keyset: product__adventure_works.';
    Comment Field [_hook__product__assembly] With 'Hook for product_assembly_id using keyset: product__adventure_works.';
    Comment Field [_hook__product__component] With 'Hook for component_id using keyset: product__adventure_works.';
    Comment Field [_hook__reference__unit_measure] With 'Hook for unit_measure_code using keyset: reference__unit_measure__adventure_works.';
    Comment Field [bill_of_material__bill_of_materials_id] With 'Primary key for BillOfMaterials records.';
    Comment Field [bill_of_material__product_assembly_id] With 'Parent product identification number. Foreign key to Product.ProductID.';
    Comment Field [bill_of_material__component_id] With 'Component identification number. Foreign key to Product.ProductID.';
    Comment Field [bill_of_material__start_date] With 'Date the component started being used in the assembly item.';
    Comment Field [bill_of_material__unit_measure_code] With 'Standard code identifying the unit of measure for the quantity.';
    Comment Field [bill_of_material__bomlevel] With 'Indicates the depth the component is from its parent (AssemblyID).';
    Comment Field [bill_of_material__per_assembly_qty] With 'Quantity of the component needed to create the assembly.';
    Comment Field [bill_of_material__modified_date] With 'Date and time the record was last updated.';
    Comment Field [bill_of_material__end_date] With 'Date the component stopped being used in the assembly item.';
    Comment Field [bill_of_material__record_hash] With 'Hash of the record.';
    Comment Field [bill_of_material__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [bill_of_material__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [bill_of_material__record_version] With 'Version of the record.';
    Comment Field [bill_of_material__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [bill_of_material__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [bill_of_material__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__bill_of_materials] Into [$(val__qvd_path__dab)/frame__adventure_works__bill_of_materials.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__bill_of_materials];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__bill_of_materials = Null();
Let var__hook__product__assembly = Null();
Let var__hook__product__component = Null();
Let var__hook__reference__unit_measure = Null();
Let var__pit_hook__bill_of_materials = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__business_entity_addresses
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__business_entity_addresses.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__business_entity_addresses.qvd]);
Set var__hook__address = 'address__adventure_works|' & Text([address_id]);
Set var__hook__business_entity = 'business_entity__adventure_works|' & Text([business_entity_id]);
Set var__hook__reference__address_type = 'reference__address_type__adventure_works|' & Text([address_type_id]);
Set var__record_version = Window(RecNo(), [address_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [address_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__address = $(var__hook__address) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__business_entity_addresses]:
    Load
        Text($(var__pit_hook__address)) As [_pit_hook__address],
        Text($(var__hook__address)) As [_hook__address],
        Text($(var__hook__business_entity)) As [_hook__business_entity],
        Text($(var__hook__reference__address_type)) As [_hook__reference__address_type],
        Num#([business_entity_id]) As [business_entity_address__business_entity_id],
        Num#([address_id]) As [business_entity_address__address_id],
        Num#([address_type_id]) As [business_entity_address__address_type_id],
        Text([rowguid]) As [business_entity_address__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [business_entity_address__modified_date],
        Text([record_hash]) As [business_entity_address__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [business_entity_address__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [business_entity_address__record_updated_at],
        Num($(var__record_version)) As [business_entity_address__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [business_entity_address__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [business_entity_address__record_valid_to],
        Num($(var__is_current_record)) As [business_entity_address__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__business_entity_addresses.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__business_entity_addresses] With 'Cross-reference table mapping customers, vendors, and employees to their addresses.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__address] With 'Point in time version of _hook__address.';
    Comment Field [_hook__address] With 'Hook for address_id using keyset: address__adventure_works.';
    Comment Field [_hook__business_entity] With 'Hook for business_entity_id using keyset: business_entity__adventure_works.';
    Comment Field [_hook__reference__address_type] With 'Hook for address_type_id using keyset: reference__address_type__adventure_works.';
    Comment Field [business_entity_address__business_entity_id] With 'Primary key. Foreign key to BusinessEntity.BusinessEntityID.';
    Comment Field [business_entity_address__address_id] With 'Primary key. Foreign key to Address.AddressID.';
    Comment Field [business_entity_address__address_type_id] With 'Primary key. Foreign key to AddressType.AddressTypeID.';
    Comment Field [business_entity_address__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [business_entity_address__modified_date] With 'Date and time the record was last updated.';
    Comment Field [business_entity_address__record_hash] With 'Hash of the record.';
    Comment Field [business_entity_address__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [business_entity_address__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [business_entity_address__record_version] With 'Version of the record.';
    Comment Field [business_entity_address__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [business_entity_address__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [business_entity_address__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__business_entity_addresses] Into [$(val__qvd_path__dab)/frame__adventure_works__business_entity_addresses.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__business_entity_addresses];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__address = Null();
Let var__hook__business_entity = Null();
Let var__hook__reference__address_type = Null();
Let var__pit_hook__address = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__business_entity_contacts
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__business_entity_contacts.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__business_entity_contacts.qvd]);
Set var__hook__business_entity = 'business_entity__adventure_works|' & Text([business_entity_id]);
Set var__hook__person__contact = 'person__individual__adventure_works|' & Text([person_id]);
Set var__hook__reference__contact_type = 'reference__contact_type__adventure_works|' & Text([contact_type_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__business_entity = $(var__hook__business_entity) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__business_entity_contacts]:
    Load
        Text($(var__pit_hook__business_entity)) As [_pit_hook__business_entity],
        Text($(var__hook__business_entity)) As [_hook__business_entity],
        Text($(var__hook__person__contact)) As [_hook__person__contact],
        Text($(var__hook__reference__contact_type)) As [_hook__reference__contact_type],
        Num#([business_entity_id]) As [business_entity_contact__business_entity_id],
        Num#([person_id]) As [business_entity_contact__person_id],
        Num#([contact_type_id]) As [business_entity_contact__contact_type_id],
        Text([rowguid]) As [business_entity_contact__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [business_entity_contact__modified_date],
        Text([record_hash]) As [business_entity_contact__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [business_entity_contact__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [business_entity_contact__record_updated_at],
        Num($(var__record_version)) As [business_entity_contact__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [business_entity_contact__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [business_entity_contact__record_valid_to],
        Num($(var__is_current_record)) As [business_entity_contact__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__business_entity_contacts.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__business_entity_contacts] With 'Cross-reference table mapping stores, vendors, and employees to people.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__business_entity] With 'Point in time version of _hook__business_entity.';
    Comment Field [_hook__business_entity] With 'Hook for business_entity_id using keyset: business_entity__adventure_works.';
    Comment Field [_hook__person__contact] With 'Hook for person_id using keyset: person__individual__adventure_works.';
    Comment Field [_hook__reference__contact_type] With 'Hook for contact_type_id using keyset: reference__contact_type__adventure_works.';
    Comment Field [business_entity_contact__business_entity_id] With 'Primary key. Foreign key to BusinessEntity.BusinessEntityID.';
    Comment Field [business_entity_contact__person_id] With 'Primary key. Foreign key to Person.BusinessEntityID.';
    Comment Field [business_entity_contact__contact_type_id] With 'Primary key. Foreign key to ContactType.ContactTypeID.';
    Comment Field [business_entity_contact__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [business_entity_contact__modified_date] With 'Date and time the record was last updated.';
    Comment Field [business_entity_contact__record_hash] With 'Hash of the record.';
    Comment Field [business_entity_contact__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [business_entity_contact__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [business_entity_contact__record_version] With 'Version of the record.';
    Comment Field [business_entity_contact__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [business_entity_contact__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [business_entity_contact__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__business_entity_contacts] Into [$(val__qvd_path__dab)/frame__adventure_works__business_entity_contacts.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__business_entity_contacts];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__business_entity = Null();
Let var__hook__person__contact = Null();
Let var__hook__reference__contact_type = Null();
Let var__pit_hook__business_entity = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__contact_types
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__contact_types.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__contact_types.qvd]);
Set var__hook__reference__contact_type = 'reference__contact_type__adventure_works|' & Text([contact_type_id]);
Set var__record_version = Window(RecNo(), [contact_type_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [contact_type_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__contact_type = $(var__hook__reference__contact_type) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__contact_types]:
    Load
        Text($(var__pit_hook__reference__contact_type)) As [_pit_hook__reference__contact_type],
        Text($(var__hook__reference__contact_type)) As [_hook__reference__contact_type],
        Num#([contact_type_id]) As [contact_type__contact_type_id],
        Text([name]) As [contact_type__name],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [contact_type__modified_date],
        Text([record_hash]) As [contact_type__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [contact_type__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [contact_type__record_updated_at],
        Num($(var__record_version)) As [contact_type__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [contact_type__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [contact_type__record_valid_to],
        Num($(var__is_current_record)) As [contact_type__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__contact_types.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__contact_types] With 'Lookup table containing the types of business entity contacts.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__contact_type] With 'Point in time version of _hook__reference__contact_type.';
    Comment Field [_hook__reference__contact_type] With 'Hook for contact_type_id using keyset: reference__contact_type__adventure_works.';
    Comment Field [contact_type__contact_type_id] With 'Primary key for ContactType records.';
    Comment Field [contact_type__name] With 'Contact type description.';
    Comment Field [contact_type__modified_date] With 'Date and time the record was last updated.';
    Comment Field [contact_type__record_hash] With 'Hash of the record.';
    Comment Field [contact_type__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [contact_type__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [contact_type__record_version] With 'Version of the record.';
    Comment Field [contact_type__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [contact_type__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [contact_type__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__contact_types] Into [$(val__qvd_path__dab)/frame__adventure_works__contact_types.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__contact_types];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__contact_type = Null();
Let var__pit_hook__reference__contact_type = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__country_regions
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__country_regions.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__country_regions.qvd]);
Set var__hook__reference__country_region = 'reference__country_region__adventure_works|' & Text([country_region_code]);
Set var__record_version = Window(RecNo(), [country_region_code], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [country_region_code], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__country_region = $(var__hook__reference__country_region) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__country_regions]:
    Load
        Text($(var__pit_hook__reference__country_region)) As [_pit_hook__reference__country_region],
        Text($(var__hook__reference__country_region)) As [_hook__reference__country_region],
        Text([country_region_code]) As [country_region__country_region_code],
        Text([name]) As [country_region__name],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [country_region__modified_date],
        Text([record_hash]) As [country_region__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [country_region__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [country_region__record_updated_at],
        Num($(var__record_version)) As [country_region__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [country_region__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [country_region__record_valid_to],
        Num($(var__is_current_record)) As [country_region__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__country_regions.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__country_regions] With 'Lookup table containing the ISO standard codes for countries and regions.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__country_region] With 'Point in time version of _hook__reference__country_region.';
    Comment Field [_hook__reference__country_region] With 'Hook for country_region_code using keyset: reference__country_region__adventure_works.';
    Comment Field [country_region__country_region_code] With 'ISO standard code for countries and regions.';
    Comment Field [country_region__name] With 'Country or region name.';
    Comment Field [country_region__modified_date] With 'Date and time the record was last updated.';
    Comment Field [country_region__record_hash] With 'Hash of the record.';
    Comment Field [country_region__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [country_region__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [country_region__record_version] With 'Version of the record.';
    Comment Field [country_region__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [country_region__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [country_region__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__country_regions] Into [$(val__qvd_path__dab)/frame__adventure_works__country_regions.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__country_regions];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__country_region = Null();
Let var__pit_hook__reference__country_region = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__credit_cards
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__credit_cards.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__credit_cards.qvd]);
Set var__hook__credit_card = 'credit_card__adventure_works|' & Text([credit_card_id]);
Set var__record_version = Window(RecNo(), [credit_card_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [credit_card_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__credit_card = $(var__hook__credit_card) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__credit_cards]:
    Load
        Text($(var__pit_hook__credit_card)) As [_pit_hook__credit_card],
        Text($(var__hook__credit_card)) As [_hook__credit_card],
        Num#([credit_card_id]) As [credit_card__credit_card_id],
        Text([card_type]) As [credit_card__card_type],
        Text([card_number]) As [credit_card__card_number],
        Num#([exp_month]) As [credit_card__exp_month],
        Num#([exp_year]) As [credit_card__exp_year],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [credit_card__modified_date],
        Text([record_hash]) As [credit_card__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [credit_card__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [credit_card__record_updated_at],
        Num($(var__record_version)) As [credit_card__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [credit_card__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [credit_card__record_valid_to],
        Num($(var__is_current_record)) As [credit_card__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__credit_cards.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__credit_cards] With 'Customer credit card information.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__credit_card] With 'Point in time version of _hook__credit_card.';
    Comment Field [_hook__credit_card] With 'Hook for credit_card_id using keyset: credit_card__adventure_works.';
    Comment Field [credit_card__credit_card_id] With 'Primary key for CreditCard records.';
    Comment Field [credit_card__card_type] With 'Credit card name.';
    Comment Field [credit_card__card_number] With 'Credit card number.';
    Comment Field [credit_card__exp_month] With 'Credit card expiration month.';
    Comment Field [credit_card__exp_year] With 'Credit card expiration year.';
    Comment Field [credit_card__modified_date] With 'Date and time the record was last updated.';
    Comment Field [credit_card__record_hash] With 'Hash of the record.';
    Comment Field [credit_card__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [credit_card__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [credit_card__record_version] With 'Version of the record.';
    Comment Field [credit_card__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [credit_card__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [credit_card__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__credit_cards] Into [$(val__qvd_path__dab)/frame__adventure_works__credit_cards.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__credit_cards];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__credit_card = Null();
Let var__pit_hook__credit_card = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__cultures
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__cultures.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__cultures.qvd]);
Set var__hook__reference__culture = 'reference__culture__adventure_works|' & Text([culture_id]);
Set var__record_version = Window(RecNo(), [culture_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [culture_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__culture = $(var__hook__reference__culture) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__cultures]:
    Load
        Text($(var__pit_hook__reference__culture)) As [_pit_hook__reference__culture],
        Text($(var__hook__reference__culture)) As [_hook__reference__culture],
        Text([culture_id]) As [culture__culture_id],
        Text([name]) As [culture__name],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [culture__modified_date],
        Text([record_hash]) As [culture__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [culture__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [culture__record_updated_at],
        Num($(var__record_version)) As [culture__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [culture__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [culture__record_valid_to],
        Num($(var__is_current_record)) As [culture__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__cultures.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__cultures] With 'Lookup table containing the languages in which some AdventureWorks data is stored.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__culture] With 'Point in time version of _hook__reference__culture.';
    Comment Field [_hook__reference__culture] With 'Hook for culture_id using keyset: reference__culture__adventure_works.';
    Comment Field [culture__culture_id] With 'Primary key for Culture records.';
    Comment Field [culture__name] With 'Culture description.';
    Comment Field [culture__modified_date] With 'Date and time the record was last updated.';
    Comment Field [culture__record_hash] With 'Hash of the record.';
    Comment Field [culture__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [culture__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [culture__record_version] With 'Version of the record.';
    Comment Field [culture__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [culture__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [culture__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__cultures] Into [$(val__qvd_path__dab)/frame__adventure_works__cultures.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__cultures];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__culture = Null();
Let var__pit_hook__reference__culture = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__currencies
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__currencies.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__currencies.qvd]);
Set var__hook__currency = 'currency__adventure_works|' & Text([currency_code]);
Set var__record_version = Window(RecNo(), [currency_code], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [currency_code], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__currency = $(var__hook__currency) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__currencies]:
    Load
        Text($(var__pit_hook__currency)) As [_pit_hook__currency],
        Text($(var__hook__currency)) As [_hook__currency],
        Text([currency_code]) As [currency__currency_code],
        Text([name]) As [currency__name],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [currency__modified_date],
        Text([record_hash]) As [currency__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [currency__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [currency__record_updated_at],
        Num($(var__record_version)) As [currency__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [currency__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [currency__record_valid_to],
        Num($(var__is_current_record)) As [currency__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__currencies.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__currencies] With 'Lookup table containing standard ISO currencies.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__currency] With 'Point in time version of _hook__currency.';
    Comment Field [_hook__currency] With 'Hook for currency_code using keyset: currency__adventure_works.';
    Comment Field [currency__currency_code] With 'The ISO code for the Currency.';
    Comment Field [currency__name] With 'Currency name.';
    Comment Field [currency__modified_date] With 'Date and time the record was last updated.';
    Comment Field [currency__record_hash] With 'Hash of the record.';
    Comment Field [currency__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [currency__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [currency__record_version] With 'Version of the record.';
    Comment Field [currency__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [currency__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [currency__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__currencies] Into [$(val__qvd_path__dab)/frame__adventure_works__currencies.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__currencies];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__currency = Null();
Let var__pit_hook__currency = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__currency_rates
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__currency_rates.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__currency_rates.qvd]);
Set var__hook__currency__from = 'currency__adventure_works|' & Text([from_currency_code]);
Set var__hook__currency__to = 'currency__adventure_works|' & Text([to_currency_code]);
Set var__hook__currency_rate = 'currency__adventure_works|' & Text([currency_rate_id]);
Set var__record_version = Window(RecNo(), [currency_rate_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [currency_rate_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__currency_rate = $(var__hook__currency_rate) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__currency_rates]:
    Load
        Text($(var__hook__currency__from)) As [_hook__currency__from],
        Text($(var__hook__currency__to)) As [_hook__currency__to],
        Text($(var__pit_hook__currency_rate)) As [_pit_hook__currency_rate],
        Text($(var__hook__currency_rate)) As [_hook__currency_rate],
        Num#([currency_rate_id]) As [currency_rate__currency_rate_id],
        Date(Num#([currency_rate_date]), 'YYYY-MM-DD') As [currency_rate__currency_rate_date],
        Text([from_currency_code]) As [currency_rate__from_currency_code],
        Text([to_currency_code]) As [currency_rate__to_currency_code],
        Num#([average_rate]) As [currency_rate__average_rate],
        Num#([end_of_day_rate]) As [currency_rate__end_of_day_rate],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [currency_rate__modified_date],
        Text([record_hash]) As [currency_rate__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [currency_rate__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [currency_rate__record_updated_at],
        Num($(var__record_version)) As [currency_rate__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [currency_rate__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [currency_rate__record_valid_to],
        Num($(var__is_current_record)) As [currency_rate__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__currency_rates.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__currency_rates] With 'Currency exchange rates.';

    Trace Commenting fields...;
    Comment Field [_hook__currency__from] With 'Hook for from_currency_code using keyset: currency__adventure_works.';
    Comment Field [_hook__currency__to] With 'Hook for to_currency_code using keyset: currency__adventure_works.';
    Comment Field [_pit_hook__currency_rate] With 'Point in time version of _hook__currency_rate.';
    Comment Field [_hook__currency_rate] With 'Hook for currency_rate_id using keyset: currency__adventure_works.';
    Comment Field [currency_rate__currency_rate_id] With 'Primary key for CurrencyRate records.';
    Comment Field [currency_rate__currency_rate_date] With 'Date and time the exchange rate was obtained.';
    Comment Field [currency_rate__from_currency_code] With 'Exchange rate was converted from this currency code.';
    Comment Field [currency_rate__to_currency_code] With 'Exchange rate was converted to this currency code.';
    Comment Field [currency_rate__average_rate] With 'Average exchange rate for the day.';
    Comment Field [currency_rate__end_of_day_rate] With 'Final exchange rate for the day.';
    Comment Field [currency_rate__modified_date] With 'Date and time the record was last updated.';
    Comment Field [currency_rate__record_hash] With 'Hash of the record.';
    Comment Field [currency_rate__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [currency_rate__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [currency_rate__record_version] With 'Version of the record.';
    Comment Field [currency_rate__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [currency_rate__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [currency_rate__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__currency_rates] Into [$(val__qvd_path__dab)/frame__adventure_works__currency_rates.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__currency_rates];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__currency__from = Null();
Let var__hook__currency__to = Null();
Let var__hook__currency_rate = Null();
Let var__pit_hook__currency_rate = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__customers
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__customers.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__customers.qvd]);
Set var__hook__customer = 'customer__adventure_works|' & Text([customer_id]);
Set var__hook__person__customer = 'person__customer__adventure_works|' & Text([person_id]);
Set var__hook__store = 'store__adventure_works|' & Text([store_id]);
Set var__hook__territory__sales = 'territory__sales__adventure_works|' & Text([territory_id]);
Set var__record_version = Window(RecNo(), [customer_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [customer_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__customer = $(var__hook__customer) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__customers]:
    Load
        Text($(var__pit_hook__customer)) As [_pit_hook__customer],
        Text($(var__hook__customer)) As [_hook__customer],
        Text($(var__hook__person__customer)) As [_hook__person__customer],
        Text($(var__hook__store)) As [_hook__store],
        Text($(var__hook__territory__sales)) As [_hook__territory__sales],
        Num#([customer_id]) As [customer__customer_id],
        Num#([store_id]) As [customer__store_id],
        Num#([territory_id]) As [customer__territory_id],
        Text([account_number]) As [customer__account_number],
        Text([rowguid]) As [customer__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [customer__modified_date],
        Num#([person_id]) As [customer__person_id],
        Text([record_hash]) As [customer__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [customer__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [customer__record_updated_at],
        Num($(var__record_version)) As [customer__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [customer__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [customer__record_valid_to],
        Num($(var__is_current_record)) As [customer__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__customers.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__customers] With 'Current customer information. Also see the Person and Store tables.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__customer] With 'Point in time version of _hook__customer.';
    Comment Field [_hook__customer] With 'Hook for customer_id using keyset: customer__adventure_works.';
    Comment Field [_hook__person__customer] With 'Hook for person_id using keyset: person__customer__adventure_works.';
    Comment Field [_hook__store] With 'Hook for store_id using keyset: store__adventure_works.';
    Comment Field [_hook__territory__sales] With 'Hook for territory_id using keyset: territory__sales__adventure_works.';
    Comment Field [customer__customer_id] With 'Primary key.';
    Comment Field [customer__store_id] With 'Foreign key to Store.BusinessEntityID.';
    Comment Field [customer__territory_id] With 'ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.';
    Comment Field [customer__account_number] With 'Unique number identifying the customer assigned by the accounting system.';
    Comment Field [customer__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [customer__modified_date] With 'Date and time the record was last updated.';
    Comment Field [customer__person_id] With 'Foreign key to Person.BusinessEntityID.';
    Comment Field [customer__record_hash] With 'Hash of the record.';
    Comment Field [customer__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [customer__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [customer__record_version] With 'Version of the record.';
    Comment Field [customer__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [customer__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [customer__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__customers] Into [$(val__qvd_path__dab)/frame__adventure_works__customers.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__customers];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__customer = Null();
Let var__hook__person__customer = Null();
Let var__hook__store = Null();
Let var__hook__territory__sales = Null();
Let var__pit_hook__customer = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__departments
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__departments.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__departments.qvd]);
Set var__hook__department = 'department__adventure_works|' & Text([department_id]);
Set var__record_version = Window(RecNo(), [department_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [department_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__department = $(var__hook__department) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__departments]:
    Load
        Text($(var__pit_hook__department)) As [_pit_hook__department],
        Text($(var__hook__department)) As [_hook__department],
        Num#([department_id]) As [department__department_id],
        Text([name]) As [department__name],
        Text([group_name]) As [department__group_name],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [department__modified_date],
        Text([record_hash]) As [department__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [department__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [department__record_updated_at],
        Num($(var__record_version)) As [department__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [department__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [department__record_valid_to],
        Num($(var__is_current_record)) As [department__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__departments.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__departments] With 'Lookup table containing the departments within the Adventure Works Cycles company.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__department] With 'Point in time version of _hook__department.';
    Comment Field [_hook__department] With 'Hook for department_id using keyset: department__adventure_works.';
    Comment Field [department__department_id] With 'Primary key for Department records.';
    Comment Field [department__name] With 'Name of the department.';
    Comment Field [department__group_name] With 'Name of the group to which the department belongs.';
    Comment Field [department__modified_date] With 'Date and time the record was last updated.';
    Comment Field [department__record_hash] With 'Hash of the record.';
    Comment Field [department__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [department__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [department__record_version] With 'Version of the record.';
    Comment Field [department__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [department__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [department__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__departments] Into [$(val__qvd_path__dab)/frame__adventure_works__departments.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__departments];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__department = Null();
Let var__pit_hook__department = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__email_addresses
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__email_addresses.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__email_addresses.qvd]);
Set var__hook__person__individual = 'person__individual__adventure_works|' & Text([business_entity_id]);
Set var__hook__email_address = 'reference__adventure_works|' & Text([email_address_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__person__individual = $(var__hook__person__individual) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__email_addresses]:
    Load
        Text($(var__pit_hook__person__individual)) As [_pit_hook__person__individual],
        Text($(var__hook__person__individual)) As [_hook__person__individual],
        Text($(var__hook__email_address)) As [_hook__email_address],
        Num#([business_entity_id]) As [email_address__business_entity_id],
        Num#([email_address_id]) As [email_address__email_address_id],
        Text([email]) As [email_address__email],
        Text([rowguid]) As [email_address__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [email_address__modified_date],
        Text([record_hash]) As [email_address__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [email_address__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [email_address__record_updated_at],
        Num($(var__record_version)) As [email_address__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [email_address__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [email_address__record_valid_to],
        Num($(var__is_current_record)) As [email_address__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__email_addresses.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__email_addresses] With 'Where to send a person email.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__person__individual] With 'Point in time version of _hook__person__individual.';
    Comment Field [_hook__person__individual] With 'Hook for business_entity_id using keyset: person__individual__adventure_works.';
    Comment Field [_hook__email_address] With 'Hook for email_address_id using keyset: reference__adventure_works.';
    Comment Field [email_address__business_entity_id] With 'Primary key. Person associated with this email address. Foreign key to Person.BusinessEntityID.';
    Comment Field [email_address__email_address_id] With 'Primary key. ID of this email address.';
    Comment Field [email_address__email] With 'E-mail address for the person.';
    Comment Field [email_address__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [email_address__modified_date] With 'Date and time the record was last updated.';
    Comment Field [email_address__record_hash] With 'Hash of the record.';
    Comment Field [email_address__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [email_address__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [email_address__record_version] With 'Version of the record.';
    Comment Field [email_address__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [email_address__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [email_address__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__email_addresses] Into [$(val__qvd_path__dab)/frame__adventure_works__email_addresses.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__email_addresses];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__person__individual = Null();
Let var__hook__email_address = Null();
Let var__pit_hook__person__individual = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__employee_department_histories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__employee_department_histories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__employee_department_histories.qvd]);
Set var__hook__person__employee = 'person__employee__adventure_works|' & Text([business_entity_id]);
Set var__hook__department = 'department__adventure_works|' & Text([department_id]);
Set var__hook__reference__shift = 'reference__shift__adventure_works|' & Text([shift_id]);
Set var__hook__epoch__start_date = 'epoch__date|' & Text([start_date]);
Set var__hook__employee_department_history = $(var__hook__person__employee) & '~' & $(var__hook__department) & '~' & $(var__hook__reference__shift) & '~' & $(var__hook__epoch__start_date);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__employee_department_history = $(var__hook__employee_department_history) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__employee_department_histories]:
    Load
        Text($(var__pit_hook__employee_department_history)) As [_pit_hook__employee_department_history],
        Text($(var__hook__employee_department_history)) As [_hook__employee_department_history],
        Text($(var__hook__person__employee)) As [_hook__person__employee],
        Text($(var__hook__department)) As [_hook__department],
        Text($(var__hook__reference__shift)) As [_hook__reference__shift],
        Text($(var__hook__epoch__start_date)) As [_hook__epoch__start_date],
        Num#([business_entity_id]) As [employee_department_history__business_entity_id],
        Num#([department_id]) As [employee_department_history__department_id],
        Num#([shift_id]) As [employee_department_history__shift_id],
        Text([start_date]) As [employee_department_history__start_date],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [employee_department_history__modified_date],
        Date(Num#([end_date]), 'YYYY-MM-DD') As [employee_department_history__end_date],
        Text([record_hash]) As [employee_department_history__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [employee_department_history__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [employee_department_history__record_updated_at],
        Num($(var__record_version)) As [employee_department_history__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [employee_department_history__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [employee_department_history__record_valid_to],
        Num($(var__is_current_record)) As [employee_department_history__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__employee_department_histories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__employee_department_histories] With 'Employee department transfers.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__employee_department_history] With 'Point in time version of _hook__employee_department_history.';
    Comment Field [_hook__employee_department_history] With 'Composite hook using _hook__person__employee and _hook__department and _hook__reference__shift and _hook__epoch__start_date.';
    Comment Field [_hook__person__employee] With 'Hook for business_entity_id using keyset: person__employee__adventure_works.';
    Comment Field [_hook__department] With 'Hook for department_id using keyset: department__adventure_works.';
    Comment Field [_hook__reference__shift] With 'Hook for shift_id using keyset: reference__shift__adventure_works.';
    Comment Field [_hook__epoch__start_date] With 'Hook for start_date using keyset: epoch__date.';
    Comment Field [employee_department_history__business_entity_id] With 'Employee identification number. Foreign key to Employee.BusinessEntityID.';
    Comment Field [employee_department_history__department_id] With 'Department in which the employee worked including currently. Foreign key to Department.DepartmentID.';
    Comment Field [employee_department_history__shift_id] With 'Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.';
    Comment Field [employee_department_history__start_date] With 'Date the employee started work in the department.';
    Comment Field [employee_department_history__modified_date] With 'Date and time the record was last updated.';
    Comment Field [employee_department_history__end_date] With 'Date the employee left the department. NULL = Current department.';
    Comment Field [employee_department_history__record_hash] With 'Hash of the record.';
    Comment Field [employee_department_history__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [employee_department_history__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [employee_department_history__record_version] With 'Version of the record.';
    Comment Field [employee_department_history__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [employee_department_history__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [employee_department_history__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__employee_department_histories] Into [$(val__qvd_path__dab)/frame__adventure_works__employee_department_histories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__employee_department_histories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__employee_department_history = Null();
Let var__hook__person__employee = Null();
Let var__hook__department = Null();
Let var__hook__reference__shift = Null();
Let var__hook__epoch__start_date = Null();
Let var__pit_hook__employee_department_history = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__employee_pay_histories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__employee_pay_histories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__employee_pay_histories.qvd]);
Set var__hook__person__employee = 'person__employee__adventure_works|' & Text([business_entity_id]);
Set var__hook__epoch__rate_change_date = 'epoch__date|' & Text([rate_change_date]);
Set var__hook__employee_pay_history = $(var__hook__person__employee) & '~' & $(var__hook__epoch__rate_change_date);
Set var__record_version = Window(RecNo(), [business_entity_id], [rate_change_date], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], [rate_change_date], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__employee_pay_history = $(var__hook__employee_pay_history) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__employee_pay_histories]:
    Load
        Text($(var__pit_hook__employee_pay_history)) As [_pit_hook__employee_pay_history],
        Text($(var__hook__employee_pay_history)) As [_hook__employee_pay_history],
        Text($(var__hook__person__employee)) As [_hook__person__employee],
        Text($(var__hook__epoch__rate_change_date)) As [_hook__epoch__rate_change_date],
        Num#([business_entity_id]) As [employee_pay_history__business_entity_id],
        Text([rate_change_date]) As [employee_pay_history__rate_change_date],
        Num#([rate]) As [employee_pay_history__rate],
        Num#([pay_frequency]) As [employee_pay_history__pay_frequency],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [employee_pay_history__modified_date],
        Text([record_hash]) As [employee_pay_history__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [employee_pay_history__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [employee_pay_history__record_updated_at],
        Num($(var__record_version)) As [employee_pay_history__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [employee_pay_history__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [employee_pay_history__record_valid_to],
        Num($(var__is_current_record)) As [employee_pay_history__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__employee_pay_histories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__employee_pay_histories] With 'Employee pay history.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__employee_pay_history] With 'Point in time version of _hook__employee_pay_history.';
    Comment Field [_hook__employee_pay_history] With 'Composite hook using _hook__person__employee and _hook__epoch__rate_change_date.';
    Comment Field [_hook__person__employee] With 'Hook for business_entity_id using keyset: person__employee__adventure_works.';
    Comment Field [_hook__epoch__rate_change_date] With 'Hook for rate_change_date using keyset: epoch__date.';
    Comment Field [employee_pay_history__business_entity_id] With 'Employee identification number. Foreign key to Employee.BusinessEntityID.';
    Comment Field [employee_pay_history__rate_change_date] With 'Date the change in pay is effective.';
    Comment Field [employee_pay_history__rate] With 'Salary hourly rate.';
    Comment Field [employee_pay_history__pay_frequency] With '1 = Salary received monthly, 2 = Salary received biweekly.';
    Comment Field [employee_pay_history__modified_date] With 'Date and time the record was last updated.';
    Comment Field [employee_pay_history__record_hash] With 'Hash of the record.';
    Comment Field [employee_pay_history__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [employee_pay_history__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [employee_pay_history__record_version] With 'Version of the record.';
    Comment Field [employee_pay_history__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [employee_pay_history__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [employee_pay_history__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__employee_pay_histories] Into [$(val__qvd_path__dab)/frame__adventure_works__employee_pay_histories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__employee_pay_histories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__employee_pay_history = Null();
Let var__hook__person__employee = Null();
Let var__hook__epoch__rate_change_date = Null();
Let var__pit_hook__employee_pay_history = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__employees
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__employees.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__employees.qvd]);
Set var__hook__person__employee = 'person__employee__adventure_works|' & Text([business_entity_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__person__employee = $(var__hook__person__employee) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__employees]:
    Load
        Text($(var__pit_hook__person__employee)) As [_pit_hook__person__employee],
        Text($(var__hook__person__employee)) As [_hook__person__employee],
        Num#([business_entity_id]) As [employee__business_entity_id],
        Text([national_idnumber]) As [employee__national_idnumber],
        Text([login_id]) As [employee__login_id],
        Text([job_title]) As [employee__job_title],
        Date(Num#([birth_date]), 'YYYY-MM-DD') As [employee__birth_date],
        Text([marital_status]) As [employee__marital_status],
        Text([gender]) As [employee__gender],
        Date(Num#([hire_date]), 'YYYY-MM-DD') As [employee__hire_date],
        Text([salaried_flag]) As [employee__salaried_flag],
        Num#([vacation_hours]) As [employee__vacation_hours],
        Num#([sick_leave_hours]) As [employee__sick_leave_hours],
        Text([current_flag]) As [employee__current_flag],
        Text([rowguid]) As [employee__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [employee__modified_date],
        Num#([organization_level]) As [employee__organization_level],
        Text([record_hash]) As [employee__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [employee__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [employee__record_updated_at],
        Num($(var__record_version)) As [employee__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [employee__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [employee__record_valid_to],
        Num($(var__is_current_record)) As [employee__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__employees.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__employees] With 'Employee information.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__person__employee] With 'Point in time version of _hook__person__employee.';
    Comment Field [_hook__person__employee] With 'Hook for business_entity_id using keyset: person__employee__adventure_works.';
    Comment Field [employee__business_entity_id] With 'Primary key for Employee records. Foreign key to BusinessEntity.BusinessEntityID.';
    Comment Field [employee__national_idnumber] With 'Unique national identification number such as a social security number.';
    Comment Field [employee__login_id] With 'Network login.';
    Comment Field [employee__job_title] With 'Work title such as Buyer or Sales Representative.';
    Comment Field [employee__birth_date] With 'Date of birth.';
    Comment Field [employee__marital_status] With 'M = Married, S = Single.';
    Comment Field [employee__gender] With 'M = Male, F = Female.';
    Comment Field [employee__hire_date] With 'Employee hired on this date.';
    Comment Field [employee__salaried_flag] With 'Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.';
    Comment Field [employee__vacation_hours] With 'Number of available vacation hours.';
    Comment Field [employee__sick_leave_hours] With 'Number of available sick leave hours.';
    Comment Field [employee__current_flag] With '0 = Inactive, 1 = Active.';
    Comment Field [employee__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [employee__modified_date] With 'Date and time the record was last updated.';
    Comment Field [employee__organization_level] With 'The depth of the employee in the corporate hierarchy.';
    Comment Field [employee__record_hash] With 'Hash of the record.';
    Comment Field [employee__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [employee__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [employee__record_version] With 'Version of the record.';
    Comment Field [employee__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [employee__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [employee__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__employees] Into [$(val__qvd_path__dab)/frame__adventure_works__employees.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__employees];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__person__employee = Null();
Let var__pit_hook__person__employee = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__illustrations
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__illustrations.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__illustrations.qvd]);
Set var__hook__reference__illustration = 'reference__illustration__adventure_works|' & Text([illustration_id]);
Set var__record_version = Window(RecNo(), [illustration_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [illustration_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__illustration = $(var__hook__reference__illustration) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__illustrations]:
    Load
        Text($(var__pit_hook__reference__illustration)) As [_pit_hook__reference__illustration],
        Text($(var__hook__reference__illustration)) As [_hook__reference__illustration],
        Num#([illustration_id]) As [illustration__illustration_id],
        Text([diagram]) As [illustration__diagram],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [illustration__modified_date],
        Text([record_hash]) As [illustration__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [illustration__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [illustration__record_updated_at],
        Num($(var__record_version)) As [illustration__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [illustration__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [illustration__record_valid_to],
        Num($(var__is_current_record)) As [illustration__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__illustrations.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__illustrations] With 'Bicycle assembly diagrams.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__illustration] With 'Point in time version of _hook__reference__illustration.';
    Comment Field [_hook__reference__illustration] With 'Hook for illustration_id using keyset: reference__illustration__adventure_works.';
    Comment Field [illustration__illustration_id] With 'Primary key for Illustration records.';
    Comment Field [illustration__diagram] With 'Illustrations used in manufacturing instructions. Stored as XML.';
    Comment Field [illustration__modified_date] With 'Date and time the record was last updated.';
    Comment Field [illustration__record_hash] With 'Hash of the record.';
    Comment Field [illustration__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [illustration__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [illustration__record_version] With 'Version of the record.';
    Comment Field [illustration__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [illustration__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [illustration__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__illustrations] Into [$(val__qvd_path__dab)/frame__adventure_works__illustrations.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__illustrations];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__illustration = Null();
Let var__pit_hook__reference__illustration = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__job_candidates
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__job_candidates.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__job_candidates.qvd]);
Set var__hook__job_candidate = 'person__adventure_works|' & Text([job_candidate_id]);
Set var__hook__person__employee = 'person__employee__adventure_works|' & Text([business_entity_id]);
Set var__record_version = Window(RecNo(), [job_candidate_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [job_candidate_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__job_candidate = $(var__hook__job_candidate) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__job_candidates]:
    Load
        Text($(var__pit_hook__job_candidate)) As [_pit_hook__job_candidate],
        Text($(var__hook__job_candidate)) As [_hook__job_candidate],
        Text($(var__hook__person__employee)) As [_hook__person__employee],
        Num#([job_candidate_id]) As [job_candidate__job_candidate_id],
        Text([resume]) As [job_candidate__resume],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [job_candidate__modified_date],
        Num#([business_entity_id]) As [job_candidate__business_entity_id],
        Text([record_hash]) As [job_candidate__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [job_candidate__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [job_candidate__record_updated_at],
        Num($(var__record_version)) As [job_candidate__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [job_candidate__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [job_candidate__record_valid_to],
        Num($(var__is_current_record)) As [job_candidate__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__job_candidates.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__job_candidates] With 'Résumés submitted to Human Resources by job applicants.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__job_candidate] With 'Point in time version of _hook__job_candidate.';
    Comment Field [_hook__job_candidate] With 'Hook for job_candidate_id using keyset: person__adventure_works.';
    Comment Field [_hook__person__employee] With 'Hook for business_entity_id using keyset: person__employee__adventure_works.';
    Comment Field [job_candidate__job_candidate_id] With 'Primary key for JobCandidate records.';
    Comment Field [job_candidate__resume] With 'Résumé in XML format.';
    Comment Field [job_candidate__modified_date] With 'Date and time the record was last updated.';
    Comment Field [job_candidate__business_entity_id] With 'Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.';
    Comment Field [job_candidate__record_hash] With 'Hash of the record.';
    Comment Field [job_candidate__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [job_candidate__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [job_candidate__record_version] With 'Version of the record.';
    Comment Field [job_candidate__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [job_candidate__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [job_candidate__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__job_candidates] Into [$(val__qvd_path__dab)/frame__adventure_works__job_candidates.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__job_candidates];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__job_candidate = Null();
Let var__hook__person__employee = Null();
Let var__pit_hook__job_candidate = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__locations
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__locations.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__locations.qvd]);
Set var__hook__reference__location = 'reference__location__adventure_works|' & Text([location_id]);
Set var__record_version = Window(RecNo(), [location_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [location_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__location = $(var__hook__reference__location) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__locations]:
    Load
        Text($(var__pit_hook__reference__location)) As [_pit_hook__reference__location],
        Text($(var__hook__reference__location)) As [_hook__reference__location],
        Num#([location_id]) As [location__location_id],
        Text([name]) As [location__name],
        Num#([cost_rate]) As [location__cost_rate],
        Num#([availability]) As [location__availability],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [location__modified_date],
        Text([record_hash]) As [location__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [location__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [location__record_updated_at],
        Num($(var__record_version)) As [location__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [location__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [location__record_valid_to],
        Num($(var__is_current_record)) As [location__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__locations.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__locations] With 'Product inventory and manufacturing locations.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__location] With 'Point in time version of _hook__reference__location.';
    Comment Field [_hook__reference__location] With 'Hook for location_id using keyset: reference__location__adventure_works.';
    Comment Field [location__location_id] With 'Primary key for Location records.';
    Comment Field [location__name] With 'Location description.';
    Comment Field [location__cost_rate] With 'Standard hourly cost of the manufacturing location.';
    Comment Field [location__availability] With 'Work capacity (in hours) of the manufacturing location.';
    Comment Field [location__modified_date] With 'Date and time the record was last updated.';
    Comment Field [location__record_hash] With 'Hash of the record.';
    Comment Field [location__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [location__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [location__record_version] With 'Version of the record.';
    Comment Field [location__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [location__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [location__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__locations] Into [$(val__qvd_path__dab)/frame__adventure_works__locations.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__locations];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__location = Null();
Let var__pit_hook__reference__location = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__person_phones
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__person_phones.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__person_phones.qvd]);
Set var__hook__person__individual = 'person__individual__adventure_works|' & Text([business_entity_id]);
Set var__hook__reference__phone_number_type = 'reference__phone_number_type__adventure_works|' & Text([phone_number_type_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__person__individual = $(var__hook__person__individual) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__person_phones]:
    Load
        Text($(var__pit_hook__person__individual)) As [_pit_hook__person__individual],
        Text($(var__hook__person__individual)) As [_hook__person__individual],
        Text($(var__hook__reference__phone_number_type)) As [_hook__reference__phone_number_type],
        Num#([business_entity_id]) As [person_phone__business_entity_id],
        Text([phone_number]) As [person_phone__phone_number],
        Num#([phone_number_type_id]) As [person_phone__phone_number_type_id],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [person_phone__modified_date],
        Text([record_hash]) As [person_phone__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [person_phone__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [person_phone__record_updated_at],
        Num($(var__record_version)) As [person_phone__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [person_phone__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [person_phone__record_valid_to],
        Num($(var__is_current_record)) As [person_phone__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__person_phones.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__person_phones] With 'Telephone number and type of a person.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__person__individual] With 'Point in time version of _hook__person__individual.';
    Comment Field [_hook__person__individual] With 'Hook for business_entity_id using keyset: person__individual__adventure_works.';
    Comment Field [_hook__reference__phone_number_type] With 'Hook for phone_number_type_id using keyset: reference__phone_number_type__adventure_works.';
    Comment Field [person_phone__business_entity_id] With 'Business entity identification number. Foreign key to Person.BusinessEntityID.';
    Comment Field [person_phone__phone_number] With 'Telephone number identification number.';
    Comment Field [person_phone__phone_number_type_id] With 'Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.';
    Comment Field [person_phone__modified_date] With 'Date and time the record was last updated.';
    Comment Field [person_phone__record_hash] With 'Hash of the record.';
    Comment Field [person_phone__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [person_phone__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [person_phone__record_version] With 'Version of the record.';
    Comment Field [person_phone__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [person_phone__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [person_phone__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__person_phones] Into [$(val__qvd_path__dab)/frame__adventure_works__person_phones.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__person_phones];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__person__individual = Null();
Let var__hook__reference__phone_number_type = Null();
Let var__pit_hook__person__individual = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__persons
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__persons.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__persons.qvd]);
Set var__hook__person__individual = 'person__individual__adventure_works|' & Text([business_entity_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__person__individual = $(var__hook__person__individual) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__persons]:
    Load
        Text($(var__pit_hook__person__individual)) As [_pit_hook__person__individual],
        Text($(var__hook__person__individual)) As [_hook__person__individual],
        Num#([business_entity_id]) As [person__business_entity_id],
        Text([person_type]) As [person__person_type],
        Text([name_style]) As [person__name_style],
        Text([first_name]) As [person__first_name],
        Text([middle_name]) As [person__middle_name],
        Text([last_name]) As [person__last_name],
        Num#([email_promotion]) As [person__email_promotion],
        Text([demographics]) As [person__demographics],
        Text([rowguid]) As [person__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [person__modified_date],
        Text([title]) As [person__title],
        Text([suffix]) As [person__suffix],
        Text([additional_contact_info]) As [person__additional_contact_info],
        Text([record_hash]) As [person__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [person__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [person__record_updated_at],
        Num($(var__record_version)) As [person__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [person__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [person__record_valid_to],
        Num($(var__is_current_record)) As [person__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__persons.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__persons] With 'Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__person__individual] With 'Point in time version of _hook__person__individual.';
    Comment Field [_hook__person__individual] With 'Hook for business_entity_id using keyset: person__individual__adventure_works.';
    Comment Field [person__business_entity_id] With 'Primary key for Person records.';
    Comment Field [person__person_type] With 'Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact.';
    Comment Field [person__name_style] With '0 = The data in FirstName and LastName are stored in western style (first name, last name) order. 1 = Eastern style (last name, first name) order.';
    Comment Field [person__first_name] With 'First name of the person.';
    Comment Field [person__middle_name] With 'Middle name or middle initial of the person.';
    Comment Field [person__last_name] With 'Last name of the person.';
    Comment Field [person__email_promotion] With '0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.';
    Comment Field [person__demographics] With 'Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.';
    Comment Field [person__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [person__modified_date] With 'Date and time the record was last updated.';
    Comment Field [person__title] With 'A courtesy title. For example, Mr. or Ms.';
    Comment Field [person__suffix] With 'Surname suffix. For example, Sr. or Jr.';
    Comment Field [person__additional_contact_info] With 'Additional contact information about the person stored in xml format.';
    Comment Field [person__record_hash] With 'Hash of the record.';
    Comment Field [person__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [person__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [person__record_version] With 'Version of the record.';
    Comment Field [person__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [person__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [person__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__persons] Into [$(val__qvd_path__dab)/frame__adventure_works__persons.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__persons];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__person__individual = Null();
Let var__pit_hook__person__individual = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__phone_number_types
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__phone_number_types.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__phone_number_types.qvd]);
Set var__hook__reference__phone_number_type = 'reference__phone_number_type__adventure_works|' & Text([phone_number_type_id]);
Set var__record_version = Window(RecNo(), [phone_number_type_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [phone_number_type_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__phone_number_type = $(var__hook__reference__phone_number_type) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__phone_number_types]:
    Load
        Text($(var__pit_hook__reference__phone_number_type)) As [_pit_hook__reference__phone_number_type],
        Text($(var__hook__reference__phone_number_type)) As [_hook__reference__phone_number_type],
        Num#([phone_number_type_id]) As [phone_number_type__phone_number_type_id],
        Text([name]) As [phone_number_type__name],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [phone_number_type__modified_date],
        Text([record_hash]) As [phone_number_type__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [phone_number_type__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [phone_number_type__record_updated_at],
        Num($(var__record_version)) As [phone_number_type__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [phone_number_type__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [phone_number_type__record_valid_to],
        Num($(var__is_current_record)) As [phone_number_type__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__phone_number_types.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__phone_number_types] With 'Type of phone number of a person.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__phone_number_type] With 'Point in time version of _hook__reference__phone_number_type.';
    Comment Field [_hook__reference__phone_number_type] With 'Hook for phone_number_type_id using keyset: reference__phone_number_type__adventure_works.';
    Comment Field [phone_number_type__phone_number_type_id] With 'Primary key for telephone number type records.';
    Comment Field [phone_number_type__name] With 'Name of the telephone number type.';
    Comment Field [phone_number_type__modified_date] With 'Date and time the record was last updated.';
    Comment Field [phone_number_type__record_hash] With 'Hash of the record.';
    Comment Field [phone_number_type__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [phone_number_type__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [phone_number_type__record_version] With 'Version of the record.';
    Comment Field [phone_number_type__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [phone_number_type__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [phone_number_type__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__phone_number_types] Into [$(val__qvd_path__dab)/frame__adventure_works__phone_number_types.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__phone_number_types];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__phone_number_type = Null();
Let var__pit_hook__reference__phone_number_type = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_categories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_categories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_categories.qvd]);
Set var__hook__product_category = 'product_category__adventure_works|' & Text([product_category_id]);
Set var__record_version = Window(RecNo(), [product_category_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [product_category_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__product_category = $(var__hook__product_category) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_categories]:
    Load
        Text($(var__pit_hook__product_category)) As [_pit_hook__product_category],
        Text($(var__hook__product_category)) As [_hook__product_category],
        Num#([product_category_id]) As [product_category__product_category_id],
        Text([name]) As [product_category__name],
        Text([rowguid]) As [product_category__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_category__modified_date],
        Text([record_hash]) As [product_category__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_category__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_category__record_updated_at],
        Num($(var__record_version)) As [product_category__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_category__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_category__record_valid_to],
        Num($(var__is_current_record)) As [product_category__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_categories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_categories] With 'High-level product categorization.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__product_category] With 'Point in time version of _hook__product_category.';
    Comment Field [_hook__product_category] With 'Hook for product_category_id using keyset: product_category__adventure_works.';
    Comment Field [product_category__product_category_id] With 'Primary key for ProductCategory records.';
    Comment Field [product_category__name] With 'Category description.';
    Comment Field [product_category__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [product_category__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_category__record_hash] With 'Hash of the record.';
    Comment Field [product_category__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_category__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_category__record_version] With 'Version of the record.';
    Comment Field [product_category__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_category__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_category__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_categories] Into [$(val__qvd_path__dab)/frame__adventure_works__product_categories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_categories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__product_category = Null();
Let var__pit_hook__product_category = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_cost_histories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_cost_histories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_cost_histories.qvd]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__epoch__start_date = 'epoch__date|' & Text([start_date]);
Set var__hook__product_cost_history = $(var__hook__product) & '~' & $(var__hook__epoch__start_date);
Set var__record_version = Window(RecNo(), [product_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [product_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__product_cost_history = $(var__hook__product_cost_history) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_cost_histories]:
    Load
        Text($(var__pit_hook__product_cost_history)) As [_pit_hook__product_cost_history],
        Text($(var__hook__product_cost_history)) As [_hook__product_cost_history],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__epoch__start_date)) As [_hook__epoch__start_date],
        Num#([product_id]) As [product_cost_history__product_id],
        Text([start_date]) As [product_cost_history__start_date],
        Date(Num#([end_date]), 'YYYY-MM-DD') As [product_cost_history__end_date],
        Num#([standard_cost]) As [product_cost_history__standard_cost],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_cost_history__modified_date],
        Text([record_hash]) As [product_cost_history__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_cost_history__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_cost_history__record_updated_at],
        Num($(var__record_version)) As [product_cost_history__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_cost_history__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_cost_history__record_valid_to],
        Num($(var__is_current_record)) As [product_cost_history__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_cost_histories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_cost_histories] With 'Changes in the cost of a product over time.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__product_cost_history] With 'Point in time version of _hook__product_cost_history.';
    Comment Field [_hook__product_cost_history] With 'Composite hook using _hook__product and _hook__epoch__start_date.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__epoch__start_date] With 'Hook for start_date using keyset: epoch__date.';
    Comment Field [product_cost_history__product_id] With 'Product identification number. Foreign key to Product.ProductID.';
    Comment Field [product_cost_history__start_date] With 'Product cost start date.';
    Comment Field [product_cost_history__end_date] With 'Product cost end date.';
    Comment Field [product_cost_history__standard_cost] With 'Standard cost of the product.';
    Comment Field [product_cost_history__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_cost_history__record_hash] With 'Hash of the record.';
    Comment Field [product_cost_history__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_cost_history__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_cost_history__record_version] With 'Version of the record.';
    Comment Field [product_cost_history__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_cost_history__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_cost_history__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_cost_histories] Into [$(val__qvd_path__dab)/frame__adventure_works__product_cost_histories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_cost_histories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__product_cost_history = Null();
Let var__hook__product = Null();
Let var__hook__epoch__start_date = Null();
Let var__pit_hook__product_cost_history = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_descriptions
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_descriptions.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_descriptions.qvd]);
Set var__hook__reference__product_description = 'reference__product_description__adventure_works|' & Text([product_description_id]);
Set var__record_version = Window(RecNo(), [product_description_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [product_description_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__product_description = $(var__hook__reference__product_description) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_descriptions]:
    Load
        Text($(var__pit_hook__reference__product_description)) As [_pit_hook__reference__product_description],
        Text($(var__hook__reference__product_description)) As [_hook__reference__product_description],
        Num#([product_description_id]) As [product_description__product_description_id],
        Text([description]) As [product_description__description],
        Text([rowguid]) As [product_description__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_description__modified_date],
        Text([record_hash]) As [product_description__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_description__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_description__record_updated_at],
        Num($(var__record_version)) As [product_description__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_description__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_description__record_valid_to],
        Num($(var__is_current_record)) As [product_description__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_descriptions.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_descriptions] With 'Product descriptions in several languages.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__product_description] With 'Point in time version of _hook__reference__product_description.';
    Comment Field [_hook__reference__product_description] With 'Hook for product_description_id using keyset: reference__product_description__adventure_works.';
    Comment Field [product_description__product_description_id] With 'Primary key for ProductDescription records.';
    Comment Field [product_description__description] With 'Description of the product.';
    Comment Field [product_description__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [product_description__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_description__record_hash] With 'Hash of the record.';
    Comment Field [product_description__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_description__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_description__record_version] With 'Version of the record.';
    Comment Field [product_description__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_description__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_description__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_descriptions] Into [$(val__qvd_path__dab)/frame__adventure_works__product_descriptions.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_descriptions];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__product_description = Null();
Let var__pit_hook__reference__product_description = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_inventories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_inventories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_inventories.qvd]);
Set var__hook__reference__location = 'reference__location__adventure_works|' & Text([location_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__reference__product_location = $(var__hook__reference__location) & '~' & $(var__hook__product);
Set var__record_version = Window(RecNo(), [location_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [location_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__product_location = $(var__hook__reference__product_location) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_inventories]:
    Load
        Text($(var__pit_hook__reference__product_location)) As [_pit_hook__reference__product_location],
        Text($(var__hook__reference__product_location)) As [_hook__reference__product_location],
        Text($(var__hook__reference__location)) As [_hook__reference__location],
        Text($(var__hook__product)) As [_hook__product],
        Num#([product_id]) As [product_inventory__product_id],
        Num#([location_id]) As [product_inventory__location_id],
        Text([shelf]) As [product_inventory__shelf],
        Num#([bin]) As [product_inventory__bin],
        Num#([quantity]) As [product_inventory__quantity],
        Text([rowguid]) As [product_inventory__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_inventory__modified_date],
        Text([record_hash]) As [product_inventory__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_inventory__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_inventory__record_updated_at],
        Num($(var__record_version)) As [product_inventory__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_inventory__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_inventory__record_valid_to],
        Num($(var__is_current_record)) As [product_inventory__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_inventories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_inventories] With 'Product inventory information.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__product_location] With 'Point in time version of _hook__reference__product_location.';
    Comment Field [_hook__reference__product_location] With 'Composite hook using _hook__reference__location and _hook__product.';
    Comment Field [_hook__reference__location] With 'Hook for location_id using keyset: reference__location__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [product_inventory__product_id] With 'Product identification number. Foreign key to Product.ProductID.';
    Comment Field [product_inventory__location_id] With 'Inventory location identification number. Foreign key to Location.LocationID.';
    Comment Field [product_inventory__shelf] With 'Storage compartment within an inventory location.';
    Comment Field [product_inventory__bin] With 'Storage container on a shelf in an inventory location.';
    Comment Field [product_inventory__quantity] With 'Quantity of products in the inventory location.';
    Comment Field [product_inventory__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [product_inventory__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_inventory__record_hash] With 'Hash of the record.';
    Comment Field [product_inventory__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_inventory__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_inventory__record_version] With 'Version of the record.';
    Comment Field [product_inventory__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_inventory__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_inventory__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_inventories] Into [$(val__qvd_path__dab)/frame__adventure_works__product_inventories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_inventories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__product_location = Null();
Let var__hook__reference__location = Null();
Let var__hook__product = Null();
Let var__pit_hook__reference__product_location = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_list_price_histories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_list_price_histories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_list_price_histories.qvd]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__epoch__start_date = 'epoch__date|' & Text([start_date]);
Set var__hook__product_list_price_history = $(var__hook__product) & '~' & $(var__hook__epoch__start_date);
Set var__record_version = Window(RecNo(), [product_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [product_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__product_list_price_history = $(var__hook__product_list_price_history) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_list_price_histories]:
    Load
        Text($(var__pit_hook__product_list_price_history)) As [_pit_hook__product_list_price_history],
        Text($(var__hook__product_list_price_history)) As [_hook__product_list_price_history],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__epoch__start_date)) As [_hook__epoch__start_date],
        Num#([product_id]) As [product_list_price_history__product_id],
        Text([start_date]) As [product_list_price_history__start_date],
        Date(Num#([end_date]), 'YYYY-MM-DD') As [product_list_price_history__end_date],
        Num#([list_price]) As [product_list_price_history__list_price],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_list_price_history__modified_date],
        Text([record_hash]) As [product_list_price_history__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_list_price_history__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_list_price_history__record_updated_at],
        Num($(var__record_version)) As [product_list_price_history__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_list_price_history__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_list_price_history__record_valid_to],
        Num($(var__is_current_record)) As [product_list_price_history__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_list_price_histories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_list_price_histories] With 'Changes in the list price of a product over time.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__product_list_price_history] With 'Point in time version of _hook__product_list_price_history.';
    Comment Field [_hook__product_list_price_history] With 'Composite hook using _hook__product and _hook__epoch__start_date.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__epoch__start_date] With 'Hook for start_date using keyset: epoch__date.';
    Comment Field [product_list_price_history__product_id] With 'Product identification number. Foreign key to Product.ProductID.';
    Comment Field [product_list_price_history__start_date] With 'List price start date.';
    Comment Field [product_list_price_history__end_date] With 'List price end date.';
    Comment Field [product_list_price_history__list_price] With 'Product list price.';
    Comment Field [product_list_price_history__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_list_price_history__record_hash] With 'Hash of the record.';
    Comment Field [product_list_price_history__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_list_price_history__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_list_price_history__record_version] With 'Version of the record.';
    Comment Field [product_list_price_history__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_list_price_history__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_list_price_history__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_list_price_histories] Into [$(val__qvd_path__dab)/frame__adventure_works__product_list_price_histories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_list_price_histories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__product_list_price_history = Null();
Let var__hook__product = Null();
Let var__hook__epoch__start_date = Null();
Let var__pit_hook__product_list_price_history = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_model_illustrations
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_model_illustrations.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_model_illustrations.qvd]);
Set var__hook__reference__illustration = 'reference__illustration__adventure_works|' & Text([illustration_id]);
Set var__hook__reference__product_model = 'reference__product_model__adventure_works|' & Text([product_model_id]);
Set var__hook__product_model_illustration = $(var__hook__reference__product_model) & '~' & $(var__hook__reference__illustration);
Set var__record_version = Window(RecNo(), [illustration_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [illustration_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__product_model_illustration = $(var__hook__product_model_illustration) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_model_illustrations]:
    Load
        Text($(var__pit_hook__product_model_illustration)) As [_pit_hook__product_model_illustration],
        Text($(var__hook__product_model_illustration)) As [_hook__product_model_illustration],
        Text($(var__hook__reference__illustration)) As [_hook__reference__illustration],
        Text($(var__hook__reference__product_model)) As [_hook__reference__product_model],
        Num#([product_model_id]) As [product_model_illustration__product_model_id],
        Num#([illustration_id]) As [product_model_illustration__illustration_id],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_model_illustration__modified_date],
        Text([record_hash]) As [product_model_illustration__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_model_illustration__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_model_illustration__record_updated_at],
        Num($(var__record_version)) As [product_model_illustration__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_model_illustration__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_model_illustration__record_valid_to],
        Num($(var__is_current_record)) As [product_model_illustration__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_model_illustrations.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_model_illustrations] With 'Cross-reference table mapping product models and illustrations.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__product_model_illustration] With 'Point in time version of _hook__product_model_illustration.';
    Comment Field [_hook__product_model_illustration] With 'Composite hook using _hook__reference__product_model and _hook__reference__illustration.';
    Comment Field [_hook__reference__illustration] With 'Hook for illustration_id using keyset: reference__illustration__adventure_works.';
    Comment Field [_hook__reference__product_model] With 'Hook for product_model_id using keyset: reference__product_model__adventure_works.';
    Comment Field [product_model_illustration__product_model_id] With 'Primary key. Foreign key to ProductModel.ProductModelID.';
    Comment Field [product_model_illustration__illustration_id] With 'Primary key. Foreign key to Illustration.IllustrationID.';
    Comment Field [product_model_illustration__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_model_illustration__record_hash] With 'Hash of the record.';
    Comment Field [product_model_illustration__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_model_illustration__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_model_illustration__record_version] With 'Version of the record.';
    Comment Field [product_model_illustration__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_model_illustration__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_model_illustration__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_model_illustrations] Into [$(val__qvd_path__dab)/frame__adventure_works__product_model_illustrations.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_model_illustrations];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__product_model_illustration = Null();
Let var__hook__reference__illustration = Null();
Let var__hook__reference__product_model = Null();
Let var__pit_hook__product_model_illustration = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_models
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_models.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_models.qvd]);
Set var__hook__reference__product_model = 'reference__product_model__adventure_works|' & Text([product_model_id]);
Set var__record_version = Window(RecNo(), [product_model_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [product_model_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__product_model = $(var__hook__reference__product_model) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_models]:
    Load
        Text($(var__pit_hook__reference__product_model)) As [_pit_hook__reference__product_model],
        Text($(var__hook__reference__product_model)) As [_hook__reference__product_model],
        Num#([product_model_id]) As [product_model__product_model_id],
        Text([name]) As [product_model__name],
        Text([rowguid]) As [product_model__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_model__modified_date],
        Text([catalog_description]) As [product_model__catalog_description],
        Text([instructions]) As [product_model__instructions],
        Text([record_hash]) As [product_model__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_model__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_model__record_updated_at],
        Num($(var__record_version)) As [product_model__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_model__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_model__record_valid_to],
        Num($(var__is_current_record)) As [product_model__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_models.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_models] With 'Product model classification.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__product_model] With 'Point in time version of _hook__reference__product_model.';
    Comment Field [_hook__reference__product_model] With 'Hook for product_model_id using keyset: reference__product_model__adventure_works.';
    Comment Field [product_model__product_model_id] With 'Primary key for ProductModel records.';
    Comment Field [product_model__name] With 'Product model description.';
    Comment Field [product_model__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [product_model__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_model__catalog_description] With 'Detailed product catalog information in xml format.';
    Comment Field [product_model__instructions] With 'Manufacturing instructions in xml format.';
    Comment Field [product_model__record_hash] With 'Hash of the record.';
    Comment Field [product_model__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_model__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_model__record_version] With 'Version of the record.';
    Comment Field [product_model__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_model__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_model__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_models] Into [$(val__qvd_path__dab)/frame__adventure_works__product_models.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_models];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__product_model = Null();
Let var__pit_hook__reference__product_model = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_photos
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_photos.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_photos.qvd]);
Set var__hook__reference__product_photo = 'reference__product_photo__adventure_works|' & Text([product_photo_id]);
Set var__record_version = Window(RecNo(), [product_photo_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [product_photo_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__product_photo = $(var__hook__reference__product_photo) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_photos]:
    Load
        Text($(var__pit_hook__reference__product_photo)) As [_pit_hook__reference__product_photo],
        Text($(var__hook__reference__product_photo)) As [_hook__reference__product_photo],
        Num#([product_photo_id]) As [product_photo__product_photo_id],
        Text([thumb_nail_photo]) As [product_photo__thumb_nail_photo],
        Text([thumbnail_photo_file_name]) As [product_photo__thumbnail_photo_file_name],
        Text([large_photo]) As [product_photo__large_photo],
        Text([large_photo_file_name]) As [product_photo__large_photo_file_name],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_photo__modified_date],
        Text([record_hash]) As [product_photo__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_photo__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_photo__record_updated_at],
        Num($(var__record_version)) As [product_photo__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_photo__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_photo__record_valid_to],
        Num($(var__is_current_record)) As [product_photo__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_photos.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_photos] With 'Product images.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__product_photo] With 'Point in time version of _hook__reference__product_photo.';
    Comment Field [_hook__reference__product_photo] With 'Hook for product_photo_id using keyset: reference__product_photo__adventure_works.';
    Comment Field [product_photo__product_photo_id] With 'Primary key for ProductPhoto records.';
    Comment Field [product_photo__thumb_nail_photo] With 'Small image of the product.';
    Comment Field [product_photo__thumbnail_photo_file_name] With 'Small image file name.';
    Comment Field [product_photo__large_photo] With 'Large image of the product.';
    Comment Field [product_photo__large_photo_file_name] With 'Large image file name.';
    Comment Field [product_photo__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_photo__record_hash] With 'Hash of the record.';
    Comment Field [product_photo__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_photo__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_photo__record_version] With 'Version of the record.';
    Comment Field [product_photo__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_photo__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_photo__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_photos] Into [$(val__qvd_path__dab)/frame__adventure_works__product_photos.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_photos];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__product_photo = Null();
Let var__pit_hook__reference__product_photo = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_reviews
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_reviews.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_reviews.qvd]);
Set var__hook__product_review = 'product__adventure_works|' & Text([product_review_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__record_version = Window(RecNo(), [product_review_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [product_review_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__product_review = $(var__hook__product_review) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_reviews]:
    Load
        Text($(var__pit_hook__product_review)) As [_pit_hook__product_review],
        Text($(var__hook__product_review)) As [_hook__product_review],
        Text($(var__hook__product)) As [_hook__product],
        Num#([product_review_id]) As [product_review__product_review_id],
        Num#([product_id]) As [product_review__product_id],
        Text([reviewer_name]) As [product_review__reviewer_name],
        Date(Num#([review_date]), 'YYYY-MM-DD') As [product_review__review_date],
        Text([email_address]) As [product_review__email_address],
        Num#([rating]) As [product_review__rating],
        Text([comments]) As [product_review__comments],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_review__modified_date],
        Text([record_hash]) As [product_review__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_review__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_review__record_updated_at],
        Num($(var__record_version)) As [product_review__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_review__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_review__record_valid_to],
        Num($(var__is_current_record)) As [product_review__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_reviews.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_reviews] With 'Customer reviews of products they have purchased.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__product_review] With 'Point in time version of _hook__product_review.';
    Comment Field [_hook__product_review] With 'Hook for product_review_id using keyset: product__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [product_review__product_review_id] With 'Primary key for ProductReview records.';
    Comment Field [product_review__product_id] With 'Product identification number. Foreign key to Product.ProductID.';
    Comment Field [product_review__reviewer_name] With 'Name of the reviewer.';
    Comment Field [product_review__review_date] With 'Date review was submitted.';
    Comment Field [product_review__email_address] With 'Reviewer$(=Chr39())s e-mail address.';
    Comment Field [product_review__rating] With 'Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.';
    Comment Field [product_review__comments] With 'Reviewer$(=Chr39())s comments.';
    Comment Field [product_review__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_review__record_hash] With 'Hash of the record.';
    Comment Field [product_review__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_review__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_review__record_version] With 'Version of the record.';
    Comment Field [product_review__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_review__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_review__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_reviews] Into [$(val__qvd_path__dab)/frame__adventure_works__product_reviews.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_reviews];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__product_review = Null();
Let var__hook__product = Null();
Let var__pit_hook__product_review = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_subcategories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_subcategories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_subcategories.qvd]);
Set var__hook__product_subcategory = 'product_subcategory__adventure_works|' & Text([product_subcategory_id]);
Set var__hook__product_category = 'product_category__adventure_works|' & Text([product_category_id]);
Set var__record_version = Window(RecNo(), [product_subcategory_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [product_subcategory_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__product_subcategory = $(var__hook__product_subcategory) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_subcategories]:
    Load
        Text($(var__pit_hook__product_subcategory)) As [_pit_hook__product_subcategory],
        Text($(var__hook__product_subcategory)) As [_hook__product_subcategory],
        Text($(var__hook__product_category)) As [_hook__product_category],
        Num#([product_subcategory_id]) As [product_subcategory__product_subcategory_id],
        Num#([product_category_id]) As [product_subcategory__product_category_id],
        Text([name]) As [product_subcategory__name],
        Text([rowguid]) As [product_subcategory__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_subcategory__modified_date],
        Text([record_hash]) As [product_subcategory__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_subcategory__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_subcategory__record_updated_at],
        Num($(var__record_version)) As [product_subcategory__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_subcategory__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_subcategory__record_valid_to],
        Num($(var__is_current_record)) As [product_subcategory__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_subcategories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_subcategories] With 'Product subcategories. See ProductCategory table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__product_subcategory] With 'Point in time version of _hook__product_subcategory.';
    Comment Field [_hook__product_subcategory] With 'Hook for product_subcategory_id using keyset: product_subcategory__adventure_works.';
    Comment Field [_hook__product_category] With 'Hook for product_category_id using keyset: product_category__adventure_works.';
    Comment Field [product_subcategory__product_subcategory_id] With 'Primary key for ProductSubcategory records.';
    Comment Field [product_subcategory__product_category_id] With 'Product category identification number. Foreign key to ProductCategory.ProductCategoryID.';
    Comment Field [product_subcategory__name] With 'Subcategory description.';
    Comment Field [product_subcategory__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [product_subcategory__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_subcategory__record_hash] With 'Hash of the record.';
    Comment Field [product_subcategory__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_subcategory__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_subcategory__record_version] With 'Version of the record.';
    Comment Field [product_subcategory__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_subcategory__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_subcategory__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_subcategories] Into [$(val__qvd_path__dab)/frame__adventure_works__product_subcategories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_subcategories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__product_subcategory = Null();
Let var__hook__product_category = Null();
Let var__pit_hook__product_subcategory = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__product_vendors
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_vendors.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__product_vendors.qvd]);
Set var__hook__vendor = 'vendor__adventure_works|' & Text([business_entity_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__reference__unit_measure = 'reference__unit_measure__adventure_works|' & Text([unit_measure_code]);
Set var__hook__product_vendor = $(var__hook__vendor) & '~' & $(var__hook__product);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__product_vendor = $(var__hook__product_vendor) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__product_vendors]:
    Load
        Text($(var__pit_hook__product_vendor)) As [_pit_hook__product_vendor],
        Text($(var__hook__product_vendor)) As [_hook__product_vendor],
        Text($(var__hook__vendor)) As [_hook__vendor],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__reference__unit_measure)) As [_hook__reference__unit_measure],
        Num#([product_id]) As [product_vendor__product_id],
        Num#([business_entity_id]) As [product_vendor__business_entity_id],
        Num#([average_lead_time]) As [product_vendor__average_lead_time],
        Num#([standard_price]) As [product_vendor__standard_price],
        Num#([last_receipt_cost]) As [product_vendor__last_receipt_cost],
        Date(Num#([last_receipt_date]), 'YYYY-MM-DD') As [product_vendor__last_receipt_date],
        Num#([min_order_qty]) As [product_vendor__min_order_qty],
        Num#([max_order_qty]) As [product_vendor__max_order_qty],
        Text([unit_measure_code]) As [product_vendor__unit_measure_code],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product_vendor__modified_date],
        Num#([on_order_qty]) As [product_vendor__on_order_qty],
        Text([record_hash]) As [product_vendor__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product_vendor__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product_vendor__record_updated_at],
        Num($(var__record_version)) As [product_vendor__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product_vendor__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product_vendor__record_valid_to],
        Num($(var__is_current_record)) As [product_vendor__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__product_vendors.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__product_vendors] With 'Cross-reference table mapping vendors with the products they supply.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__product_vendor] With 'Point in time version of _hook__product_vendor.';
    Comment Field [_hook__product_vendor] With 'Composite hook using _hook__vendor and _hook__product.';
    Comment Field [_hook__vendor] With 'Hook for business_entity_id using keyset: vendor__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__reference__unit_measure] With 'Hook for unit_measure_code using keyset: reference__unit_measure__adventure_works.';
    Comment Field [product_vendor__product_id] With 'Primary key. Foreign key to Product.ProductID.';
    Comment Field [product_vendor__business_entity_id] With 'Primary key. Foreign key to Vendor.BusinessEntityID.';
    Comment Field [product_vendor__average_lead_time] With 'The average span of time (in days) between placing an order with the vendor and receiving the purchased product.';
    Comment Field [product_vendor__standard_price] With 'The vendor$(=Chr39())s usual selling price.';
    Comment Field [product_vendor__last_receipt_cost] With 'The selling price when last purchased.';
    Comment Field [product_vendor__last_receipt_date] With 'Date the product was last received by the vendor.';
    Comment Field [product_vendor__min_order_qty] With 'The minimum quantity that should be ordered.';
    Comment Field [product_vendor__max_order_qty] With 'The maximum quantity that should be ordered.';
    Comment Field [product_vendor__unit_measure_code] With 'The product$(=Chr39())s unit of measure.';
    Comment Field [product_vendor__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product_vendor__on_order_qty] With 'The quantity currently on order.';
    Comment Field [product_vendor__record_hash] With 'Hash of the record.';
    Comment Field [product_vendor__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product_vendor__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product_vendor__record_version] With 'Version of the record.';
    Comment Field [product_vendor__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product_vendor__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product_vendor__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__product_vendors] Into [$(val__qvd_path__dab)/frame__adventure_works__product_vendors.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__product_vendors];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__product_vendor = Null();
Let var__hook__vendor = Null();
Let var__hook__product = Null();
Let var__hook__reference__unit_measure = Null();
Let var__pit_hook__product_vendor = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__products
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__products.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__products.qvd]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__product_subcategory = 'product_subcategory__adventure_works|' & Text([product_subcategory_id]);
Set var__hook__reference__product_model = 'reference__product_model__adventure_works|' & Text([product_model_id]);
Set var__record_version = Window(RecNo(), [product_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [product_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__product = $(var__hook__product) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__products]:
    Load
        Text($(var__pit_hook__product)) As [_pit_hook__product],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__product_subcategory)) As [_hook__product_subcategory],
        Text($(var__hook__reference__product_model)) As [_hook__reference__product_model],
        Num#([product_id]) As [product__product_id],
        Text([name]) As [product__name],
        Text([product_number]) As [product__product_number],
        Text([make_flag]) As [product__make_flag],
        Text([finished_goods_flag]) As [product__finished_goods_flag],
        Num#([safety_stock_level]) As [product__safety_stock_level],
        Num#([reorder_point]) As [product__reorder_point],
        Num#([standard_cost]) As [product__standard_cost],
        Num#([list_price]) As [product__list_price],
        Num#([days_to_manufacture]) As [product__days_to_manufacture],
        Date(Num#([sell_start_date]), 'YYYY-MM-DD') As [product__sell_start_date],
        Text([rowguid]) As [product__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [product__modified_date],
        Text([color]) As [product__color],
        Text([class]) As [product__class],
        Text([weight_unit_measure_code]) As [product__weight_unit_measure_code],
        Num#([weight]) As [product__weight],
        Text([size]) As [product__size],
        Text([size_unit_measure_code]) As [product__size_unit_measure_code],
        Text([product_line]) As [product__product_line],
        Text([style]) As [product__style],
        Num#([product_subcategory_id]) As [product__product_subcategory_id],
        Num#([product_model_id]) As [product__product_model_id],
        Date(Num#([sell_end_date]), 'YYYY-MM-DD') As [product__sell_end_date],
        Text([record_hash]) As [product__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [product__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [product__record_updated_at],
        Num($(var__record_version)) As [product__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [product__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [product__record_valid_to],
        Num($(var__is_current_record)) As [product__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__products.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__products] With 'Products sold or used in the manufacturing of sold products.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__product] With 'Point in time version of _hook__product.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__product_subcategory] With 'Hook for product_subcategory_id using keyset: product_subcategory__adventure_works.';
    Comment Field [_hook__reference__product_model] With 'Hook for product_model_id using keyset: reference__product_model__adventure_works.';
    Comment Field [product__product_id] With 'Primary key for Product records.';
    Comment Field [product__name] With 'Name of the product.';
    Comment Field [product__product_number] With 'Unique product identification number.';
    Comment Field [product__make_flag] With '0 = Product is purchased, 1 = Product is manufactured in-house.';
    Comment Field [product__finished_goods_flag] With '0 = Product is not a salable item. 1 = Product is salable.';
    Comment Field [product__safety_stock_level] With 'Minimum inventory quantity.';
    Comment Field [product__reorder_point] With 'Inventory level that triggers a purchase order or work order.';
    Comment Field [product__standard_cost] With 'Standard cost of the product.';
    Comment Field [product__list_price] With 'Selling price.';
    Comment Field [product__days_to_manufacture] With 'Number of days required to manufacture the product.';
    Comment Field [product__sell_start_date] With 'Date the product was available for sale.';
    Comment Field [product__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [product__modified_date] With 'Date and time the record was last updated.';
    Comment Field [product__color] With 'Product color.';
    Comment Field [product__class] With 'H = High, M = Medium, L = Low.';
    Comment Field [product__weight_unit_measure_code] With 'Unit of measure for Weight column.';
    Comment Field [product__weight] With 'Product weight.';
    Comment Field [product__size] With 'Product size.';
    Comment Field [product__size_unit_measure_code] With 'Unit of measure for Size column.';
    Comment Field [product__product_line] With 'R = Road, M = Mountain, T = Touring, S = Standard.';
    Comment Field [product__style] With 'W = Womens, M = Mens, U = Universal.';
    Comment Field [product__product_subcategory_id] With 'Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.';
    Comment Field [product__product_model_id] With 'Product is a member of this product model. Foreign key to ProductModel.ProductModelID.';
    Comment Field [product__sell_end_date] With 'Date the product was no longer available for sale.';
    Comment Field [product__record_hash] With 'Hash of the record.';
    Comment Field [product__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [product__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [product__record_version] With 'Version of the record.';
    Comment Field [product__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [product__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [product__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__products] Into [$(val__qvd_path__dab)/frame__adventure_works__products.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__products];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__product = Null();
Let var__hook__product_subcategory = Null();
Let var__hook__reference__product_model = Null();
Let var__pit_hook__product = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__purchase_order_details
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__purchase_order_details.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__purchase_order_details.qvd]);
Set var__hook__order_line__purchase = 'order_line__purchase__adventure_works|' & Text([purchase_order_detail_id]);
Set var__hook__order__purchase = 'order__purchase__adventure_works|' & Text([purchase_order_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__record_version = Window(RecNo(), [purchase_order_detail_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [purchase_order_detail_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__order_line__purchase = $(var__hook__order_line__purchase) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__purchase_order_details]:
    Load
        Text($(var__pit_hook__order_line__purchase)) As [_pit_hook__order_line__purchase],
        Text($(var__hook__order_line__purchase)) As [_hook__order_line__purchase],
        Text($(var__hook__order__purchase)) As [_hook__order__purchase],
        Text($(var__hook__product)) As [_hook__product],
        Num#([purchase_order_id]) As [purchase_order_detail__purchase_order_id],
        Num#([purchase_order_detail_id]) As [purchase_order_detail__purchase_order_detail_id],
        Date(Num#([due_date]), 'YYYY-MM-DD') As [purchase_order_detail__due_date],
        Num#([order_qty]) As [purchase_order_detail__order_qty],
        Num#([product_id]) As [purchase_order_detail__product_id],
        Num#([unit_price]) As [purchase_order_detail__unit_price],
        Num#([line_total]) As [purchase_order_detail__line_total],
        Num#([received_qty]) As [purchase_order_detail__received_qty],
        Num#([rejected_qty]) As [purchase_order_detail__rejected_qty],
        Num#([stocked_qty]) As [purchase_order_detail__stocked_qty],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [purchase_order_detail__modified_date],
        Text([record_hash]) As [purchase_order_detail__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [purchase_order_detail__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [purchase_order_detail__record_updated_at],
        Num($(var__record_version)) As [purchase_order_detail__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [purchase_order_detail__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [purchase_order_detail__record_valid_to],
        Num($(var__is_current_record)) As [purchase_order_detail__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__purchase_order_details.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__purchase_order_details] With 'Individual products associated with a specific purchase order. See PurchaseOrderHeader.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__order_line__purchase] With 'Point in time version of _hook__order_line__purchase.';
    Comment Field [_hook__order_line__purchase] With 'Hook for purchase_order_detail_id using keyset: order_line__purchase__adventure_works.';
    Comment Field [_hook__order__purchase] With 'Hook for purchase_order_id using keyset: order__purchase__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [purchase_order_detail__purchase_order_id] With 'Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.';
    Comment Field [purchase_order_detail__purchase_order_detail_id] With 'Primary key. One line number per purchased product.';
    Comment Field [purchase_order_detail__due_date] With 'Date the product is expected to be received.';
    Comment Field [purchase_order_detail__order_qty] With 'Quantity ordered.';
    Comment Field [purchase_order_detail__product_id] With 'Product identification number. Foreign key to Product.ProductID.';
    Comment Field [purchase_order_detail__unit_price] With 'Vendor$(=Chr39())s selling price of a single product.';
    Comment Field [purchase_order_detail__line_total] With 'Per product subtotal. Computed as OrderQty * UnitPrice.';
    Comment Field [purchase_order_detail__received_qty] With 'Quantity actually received from the vendor.';
    Comment Field [purchase_order_detail__rejected_qty] With 'Quantity rejected during inspection.';
    Comment Field [purchase_order_detail__stocked_qty] With 'Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.';
    Comment Field [purchase_order_detail__modified_date] With 'Date and time the record was last updated.';
    Comment Field [purchase_order_detail__record_hash] With 'Hash of the record.';
    Comment Field [purchase_order_detail__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [purchase_order_detail__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [purchase_order_detail__record_version] With 'Version of the record.';
    Comment Field [purchase_order_detail__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [purchase_order_detail__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [purchase_order_detail__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__purchase_order_details] Into [$(val__qvd_path__dab)/frame__adventure_works__purchase_order_details.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__purchase_order_details];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__order_line__purchase = Null();
Let var__hook__order__purchase = Null();
Let var__hook__product = Null();
Let var__pit_hook__order_line__purchase = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__purchase_order_headers
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__purchase_order_headers.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__purchase_order_headers.qvd]);
Set var__hook__order__purchase = 'order__purchase__adventure_works|' & Text([purchase_order_id]);
Set var__hook__person__employee = 'person__employee__adventure_works|' & Text([employee_id]);
Set var__hook__vendor = 'vendor__adventure_works|' & Text([vendor_id]);
Set var__hook__ship_method = 'ship_method__adventure_works|' & Text([ship_method_id]);
Set var__record_version = Window(RecNo(), [purchase_order_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [purchase_order_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__order__purchase = $(var__hook__order__purchase) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__purchase_order_headers]:
    Load
        Text($(var__pit_hook__order__purchase)) As [_pit_hook__order__purchase],
        Text($(var__hook__order__purchase)) As [_hook__order__purchase],
        Text($(var__hook__person__employee)) As [_hook__person__employee],
        Text($(var__hook__vendor)) As [_hook__vendor],
        Text($(var__hook__ship_method)) As [_hook__ship_method],
        Num#([purchase_order_id]) As [purchase_order_header__purchase_order_id],
        Num#([revision_number]) As [purchase_order_header__revision_number],
        Num#([status]) As [purchase_order_header__status],
        Num#([employee_id]) As [purchase_order_header__employee_id],
        Num#([vendor_id]) As [purchase_order_header__vendor_id],
        Num#([ship_method_id]) As [purchase_order_header__ship_method_id],
        Date(Num#([order_date]), 'YYYY-MM-DD') As [purchase_order_header__order_date],
        Date(Num#([ship_date]), 'YYYY-MM-DD') As [purchase_order_header__ship_date],
        Num#([sub_total]) As [purchase_order_header__sub_total],
        Num#([tax_amt]) As [purchase_order_header__tax_amt],
        Num#([freight]) As [purchase_order_header__freight],
        Num#([total_due]) As [purchase_order_header__total_due],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [purchase_order_header__modified_date],
        Text([record_hash]) As [purchase_order_header__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [purchase_order_header__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [purchase_order_header__record_updated_at],
        Num($(var__record_version)) As [purchase_order_header__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [purchase_order_header__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [purchase_order_header__record_valid_to],
        Num($(var__is_current_record)) As [purchase_order_header__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__purchase_order_headers.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__purchase_order_headers] With 'General purchase order information. See PurchaseOrderDetail.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__order__purchase] With 'Point in time version of _hook__order__purchase.';
    Comment Field [_hook__order__purchase] With 'Hook for purchase_order_id using keyset: order__purchase__adventure_works.';
    Comment Field [_hook__person__employee] With 'Hook for employee_id using keyset: person__employee__adventure_works.';
    Comment Field [_hook__vendor] With 'Hook for vendor_id using keyset: vendor__adventure_works.';
    Comment Field [_hook__ship_method] With 'Hook for ship_method_id using keyset: ship_method__adventure_works.';
    Comment Field [purchase_order_header__purchase_order_id] With 'Primary key.';
    Comment Field [purchase_order_header__revision_number] With 'Incremental number to track changes to the purchase order over time.';
    Comment Field [purchase_order_header__status] With 'Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete.';
    Comment Field [purchase_order_header__employee_id] With 'Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.';
    Comment Field [purchase_order_header__vendor_id] With 'Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.';
    Comment Field [purchase_order_header__ship_method_id] With 'Shipping method. Foreign key to ShipMethod.ShipMethodID.';
    Comment Field [purchase_order_header__order_date] With 'Purchase order creation date.';
    Comment Field [purchase_order_header__ship_date] With 'Estimated shipment date from the vendor.';
    Comment Field [purchase_order_header__sub_total] With 'Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal) for the appropriate PurchaseOrderID.';
    Comment Field [purchase_order_header__tax_amt] With 'Tax amount.';
    Comment Field [purchase_order_header__freight] With 'Shipping cost.';
    Comment Field [purchase_order_header__total_due] With 'Total due to vendor. Computed as Subtotal + TaxAmt + Freight.';
    Comment Field [purchase_order_header__modified_date] With 'Date and time the record was last updated.';
    Comment Field [purchase_order_header__record_hash] With 'Hash of the record.';
    Comment Field [purchase_order_header__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [purchase_order_header__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [purchase_order_header__record_version] With 'Version of the record.';
    Comment Field [purchase_order_header__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [purchase_order_header__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [purchase_order_header__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__purchase_order_headers] Into [$(val__qvd_path__dab)/frame__adventure_works__purchase_order_headers.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__purchase_order_headers];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__order__purchase = Null();
Let var__hook__person__employee = Null();
Let var__hook__vendor = Null();
Let var__hook__ship_method = Null();
Let var__pit_hook__order__purchase = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__sales_order_details
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_order_details.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__sales_order_details.qvd]);
Set var__hook__order_line__sales = 'order_line__sales__adventure_works|' & Text([sales_order_detail_id]);
Set var__hook__order__sales = 'order__sales__adventure_works|' & Text([sales_order_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__reference__special_offer = 'reference__special_offer__adventure_works|' & Text([special_offer_id]);
Set var__record_version = Window(RecNo(), [sales_order_detail_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [sales_order_detail_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__order_line__sales = $(var__hook__order_line__sales) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__sales_order_details]:
    Load
        Text($(var__pit_hook__order_line__sales)) As [_pit_hook__order_line__sales],
        Text($(var__hook__order_line__sales)) As [_hook__order_line__sales],
        Text($(var__hook__order__sales)) As [_hook__order__sales],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__reference__special_offer)) As [_hook__reference__special_offer],
        Num#([sales_order_id]) As [sales_order_detail__sales_order_id],
        Num#([sales_order_detail_id]) As [sales_order_detail__sales_order_detail_id],
        Text([carrier_tracking_number]) As [sales_order_detail__carrier_tracking_number],
        Num#([order_qty]) As [sales_order_detail__order_qty],
        Num#([product_id]) As [sales_order_detail__product_id],
        Num#([special_offer_id]) As [sales_order_detail__special_offer_id],
        Num#([unit_price]) As [sales_order_detail__unit_price],
        Num#([unit_price_discount]) As [sales_order_detail__unit_price_discount],
        Num#([line_total]) As [sales_order_detail__line_total],
        Text([rowguid]) As [sales_order_detail__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [sales_order_detail__modified_date],
        Text([record_hash]) As [sales_order_detail__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [sales_order_detail__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_order_detail__record_updated_at],
        Num($(var__record_version)) As [sales_order_detail__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_order_detail__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_order_detail__record_valid_to],
        Num($(var__is_current_record)) As [sales_order_detail__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_order_details.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__sales_order_details] With 'Individual products associated with a specific sales order. See SalesOrderHeader.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__order_line__sales] With 'Point in time version of _hook__order_line__sales.';
    Comment Field [_hook__order_line__sales] With 'Hook for sales_order_detail_id using keyset: order_line__sales__adventure_works.';
    Comment Field [_hook__order__sales] With 'Hook for sales_order_id using keyset: order__sales__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__reference__special_offer] With 'Hook for special_offer_id using keyset: reference__special_offer__adventure_works.';
    Comment Field [sales_order_detail__sales_order_id] With 'Primary key. Foreign key to SalesOrderHeader.SalesOrderID.';
    Comment Field [sales_order_detail__sales_order_detail_id] With 'Primary key. One incremental unique number per product sold.';
    Comment Field [sales_order_detail__carrier_tracking_number] With 'Shipment tracking number supplied by the shipper.';
    Comment Field [sales_order_detail__order_qty] With 'Quantity ordered per product.';
    Comment Field [sales_order_detail__product_id] With 'Product sold to customer. Foreign key to Product.ProductID.';
    Comment Field [sales_order_detail__special_offer_id] With 'Promotional code. Foreign key to SpecialOffer.SpecialOfferID.';
    Comment Field [sales_order_detail__unit_price] With 'Selling price of a single product.';
    Comment Field [sales_order_detail__unit_price_discount] With 'Discount amount.';
    Comment Field [sales_order_detail__line_total] With 'Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.';
    Comment Field [sales_order_detail__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [sales_order_detail__modified_date] With 'Date and time the record was last updated.';
    Comment Field [sales_order_detail__record_hash] With 'Hash of the record.';
    Comment Field [sales_order_detail__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [sales_order_detail__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [sales_order_detail__record_version] With 'Version of the record.';
    Comment Field [sales_order_detail__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [sales_order_detail__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [sales_order_detail__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__sales_order_details] Into [$(val__qvd_path__dab)/frame__adventure_works__sales_order_details.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__sales_order_details];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__order_line__sales = Null();
Let var__hook__order__sales = Null();
Let var__hook__product = Null();
Let var__hook__reference__special_offer = Null();
Let var__pit_hook__order_line__sales = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__sales_order_headers
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_order_headers.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__sales_order_headers.qvd]);
Set var__hook__order__sales = 'order__sales__adventure_works|' & Text([sales_order_id]);
Set var__hook__customer = 'customer__adventure_works|' & Text([customer_id]);
Set var__hook__person__sales = 'person__sales__adventure_works|' & Text([sales_person_id]);
Set var__hook__territory__sales = 'territory__sales__adventure_works|' & Text([territory_id]);
Set var__hook__address__billing = 'address__adventure_works|' & Text([bill_to_address_id]);
Set var__hook__address__shipping = 'address__adventure_works|' & Text([ship_to_address_id]);
Set var__hook__ship_method = 'ship_method__adventure_works|' & Text([ship_method_id]);
Set var__hook__credit_card = 'credit_card__adventure_works|' & Text([credit_card_id]);
Set var__hook__currency = 'currency__adventure_works|' & Text([currency_rate_id]);
Set var__record_version = Window(RecNo(), [sales_order_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [sales_order_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__order__sales = $(var__hook__order__sales) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__sales_order_headers]:
    Load
        Text($(var__pit_hook__order__sales)) As [_pit_hook__order__sales],
        Text($(var__hook__order__sales)) As [_hook__order__sales],
        Text($(var__hook__customer)) As [_hook__customer],
        Text($(var__hook__person__sales)) As [_hook__person__sales],
        Text($(var__hook__territory__sales)) As [_hook__territory__sales],
        Text($(var__hook__address__billing)) As [_hook__address__billing],
        Text($(var__hook__address__shipping)) As [_hook__address__shipping],
        Text($(var__hook__ship_method)) As [_hook__ship_method],
        Text($(var__hook__credit_card)) As [_hook__credit_card],
        Text($(var__hook__currency)) As [_hook__currency],
        Num#([sales_order_id]) As [sales_order_header__sales_order_id],
        Num#([revision_number]) As [sales_order_header__revision_number],
        Date(Num#([order_date]), 'YYYY-MM-DD') As [sales_order_header__order_date],
        Date(Num#([due_date]), 'YYYY-MM-DD') As [sales_order_header__due_date],
        Date(Num#([ship_date]), 'YYYY-MM-DD') As [sales_order_header__ship_date],
        Num#([status]) As [sales_order_header__status],
        Text([online_order_flag]) As [sales_order_header__online_order_flag],
        Text([sales_order_number]) As [sales_order_header__sales_order_number],
        Text([purchase_order_number]) As [sales_order_header__purchase_order_number],
        Text([account_number]) As [sales_order_header__account_number],
        Num#([customer_id]) As [sales_order_header__customer_id],
        Num#([sales_person_id]) As [sales_order_header__sales_person_id],
        Num#([territory_id]) As [sales_order_header__territory_id],
        Num#([bill_to_address_id]) As [sales_order_header__bill_to_address_id],
        Num#([ship_to_address_id]) As [sales_order_header__ship_to_address_id],
        Num#([ship_method_id]) As [sales_order_header__ship_method_id],
        Num#([credit_card_id]) As [sales_order_header__credit_card_id],
        Text([credit_card_approval_code]) As [sales_order_header__credit_card_approval_code],
        Num#([sub_total]) As [sales_order_header__sub_total],
        Num#([tax_amt]) As [sales_order_header__tax_amt],
        Num#([freight]) As [sales_order_header__freight],
        Num#([total_due]) As [sales_order_header__total_due],
        Text([rowguid]) As [sales_order_header__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [sales_order_header__modified_date],
        Num#([currency_rate_id]) As [sales_order_header__currency_rate_id],
        Text([record_hash]) As [sales_order_header__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [sales_order_header__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_order_header__record_updated_at],
        Num($(var__record_version)) As [sales_order_header__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_order_header__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_order_header__record_valid_to],
        Num($(var__is_current_record)) As [sales_order_header__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_order_headers.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__sales_order_headers] With 'General sales order information.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__order__sales] With 'Point in time version of _hook__order__sales.';
    Comment Field [_hook__order__sales] With 'Hook for sales_order_id using keyset: order__sales__adventure_works.';
    Comment Field [_hook__customer] With 'Hook for customer_id using keyset: customer__adventure_works.';
    Comment Field [_hook__person__sales] With 'Hook for sales_person_id using keyset: person__sales__adventure_works.';
    Comment Field [_hook__territory__sales] With 'Hook for territory_id using keyset: territory__sales__adventure_works.';
    Comment Field [_hook__address__billing] With 'Hook for bill_to_address_id using keyset: address__adventure_works.';
    Comment Field [_hook__address__shipping] With 'Hook for ship_to_address_id using keyset: address__adventure_works.';
    Comment Field [_hook__ship_method] With 'Hook for ship_method_id using keyset: ship_method__adventure_works.';
    Comment Field [_hook__credit_card] With 'Hook for credit_card_id using keyset: credit_card__adventure_works.';
    Comment Field [_hook__currency] With 'Hook for currency_rate_id using keyset: currency__adventure_works.';
    Comment Field [sales_order_header__sales_order_id] With 'Primary key.';
    Comment Field [sales_order_header__revision_number] With 'Incremental number to track changes to the sales order over time.';
    Comment Field [sales_order_header__order_date] With 'Dates the sales order was created.';
    Comment Field [sales_order_header__due_date] With 'Date the order is due to the customer.';
    Comment Field [sales_order_header__ship_date] With 'Date the order was shipped to the customer.';
    Comment Field [sales_order_header__status] With 'Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled.';
    Comment Field [sales_order_header__online_order_flag] With '0 = Order placed by sales person. 1 = Order placed online by customer.';
    Comment Field [sales_order_header__sales_order_number] With 'Unique sales order identification number.';
    Comment Field [sales_order_header__purchase_order_number] With 'Customer purchase order number reference.';
    Comment Field [sales_order_header__account_number] With 'Financial accounting number reference.';
    Comment Field [sales_order_header__customer_id] With 'Customer identification number. Foreign key to Customer.BusinessEntityID.';
    Comment Field [sales_order_header__sales_person_id] With 'Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.';
    Comment Field [sales_order_header__territory_id] With 'Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.';
    Comment Field [sales_order_header__bill_to_address_id] With 'Customer billing address. Foreign key to Address.AddressID.';
    Comment Field [sales_order_header__ship_to_address_id] With 'Customer shipping address. Foreign key to Address.AddressID.';
    Comment Field [sales_order_header__ship_method_id] With 'Shipping method. Foreign key to ShipMethod.ShipMethodID.';
    Comment Field [sales_order_header__credit_card_id] With 'Credit card identification number. Foreign key to CreditCard.CreditCardID.';
    Comment Field [sales_order_header__credit_card_approval_code] With 'Approval code provided by the credit card company.';
    Comment Field [sales_order_header__sub_total] With 'Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal) for the appropriate SalesOrderID.';
    Comment Field [sales_order_header__tax_amt] With 'Tax amount.';
    Comment Field [sales_order_header__freight] With 'Shipping cost.';
    Comment Field [sales_order_header__total_due] With 'Total due from customer. Computed as Subtotal + TaxAmt + Freight.';
    Comment Field [sales_order_header__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [sales_order_header__modified_date] With 'Date and time the record was last updated.';
    Comment Field [sales_order_header__currency_rate_id] With 'Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.';
    Comment Field [sales_order_header__record_hash] With 'Hash of the record.';
    Comment Field [sales_order_header__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [sales_order_header__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [sales_order_header__record_version] With 'Version of the record.';
    Comment Field [sales_order_header__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [sales_order_header__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [sales_order_header__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__sales_order_headers] Into [$(val__qvd_path__dab)/frame__adventure_works__sales_order_headers.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__sales_order_headers];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__order__sales = Null();
Let var__hook__customer = Null();
Let var__hook__person__sales = Null();
Let var__hook__territory__sales = Null();
Let var__hook__address__billing = Null();
Let var__hook__address__shipping = Null();
Let var__hook__ship_method = Null();
Let var__hook__credit_card = Null();
Let var__hook__currency = Null();
Let var__pit_hook__order__sales = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__sales_person_quota_histories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_person_quota_histories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__sales_person_quota_histories.qvd]);
Set var__hook__person__sales = 'person__sales__adventure_works|' & Text([business_entity_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__person__sales = $(var__hook__person__sales) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__sales_person_quota_histories]:
    Load
        Text($(var__pit_hook__person__sales)) As [_pit_hook__person__sales],
        Text($(var__hook__person__sales)) As [_hook__person__sales],
        Num#([business_entity_id]) As [sales_person_quota_history__business_entity_id],
        Date(Num#([quota_date]), 'YYYY-MM-DD') As [sales_person_quota_history__quota_date],
        Num#([sales_quota]) As [sales_person_quota_history__sales_quota],
        Text([rowguid]) As [sales_person_quota_history__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [sales_person_quota_history__modified_date],
        Text([record_hash]) As [sales_person_quota_history__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [sales_person_quota_history__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_person_quota_history__record_updated_at],
        Num($(var__record_version)) As [sales_person_quota_history__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_person_quota_history__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_person_quota_history__record_valid_to],
        Num($(var__is_current_record)) As [sales_person_quota_history__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_person_quota_histories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__sales_person_quota_histories] With 'Sales performance tracking.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__person__sales] With 'Point in time version of _hook__person__sales.';
    Comment Field [_hook__person__sales] With 'Hook for business_entity_id using keyset: person__sales__adventure_works.';
    Comment Field [sales_person_quota_history__business_entity_id] With 'Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.';
    Comment Field [sales_person_quota_history__quota_date] With 'Sales quota date.';
    Comment Field [sales_person_quota_history__sales_quota] With 'Sales quota amount.';
    Comment Field [sales_person_quota_history__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [sales_person_quota_history__modified_date] With 'Date and time the record was last updated.';
    Comment Field [sales_person_quota_history__record_hash] With 'Hash of the record.';
    Comment Field [sales_person_quota_history__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [sales_person_quota_history__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [sales_person_quota_history__record_version] With 'Version of the record.';
    Comment Field [sales_person_quota_history__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [sales_person_quota_history__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [sales_person_quota_history__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__sales_person_quota_histories] Into [$(val__qvd_path__dab)/frame__adventure_works__sales_person_quota_histories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__sales_person_quota_histories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__person__sales = Null();
Let var__pit_hook__person__sales = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__sales_persons
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_persons.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__sales_persons.qvd]);
Set var__hook__person__sales = 'person__sales__adventure_works|' & Text([business_entity_id]);
Set var__hook__territory__sales = 'territory__sales__adventure_works|' & Text([territory_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__person__sales = $(var__hook__person__sales) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__sales_persons]:
    Load
        Text($(var__pit_hook__person__sales)) As [_pit_hook__person__sales],
        Text($(var__hook__person__sales)) As [_hook__person__sales],
        Text($(var__hook__territory__sales)) As [_hook__territory__sales],
        Num#([business_entity_id]) As [sales_person__business_entity_id],
        Num#([bonus]) As [sales_person__bonus],
        Num#([commission_pct]) As [sales_person__commission_pct],
        Num#([sales_ytd]) As [sales_person__sales_ytd],
        Num#([sales_last_year]) As [sales_person__sales_last_year],
        Text([rowguid]) As [sales_person__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [sales_person__modified_date],
        Num#([territory_id]) As [sales_person__territory_id],
        Num#([sales_quota]) As [sales_person__sales_quota],
        Text([record_hash]) As [sales_person__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [sales_person__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_person__record_updated_at],
        Num($(var__record_version)) As [sales_person__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_person__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_person__record_valid_to],
        Num($(var__is_current_record)) As [sales_person__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_persons.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__sales_persons] With 'Sales representative current information.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__person__sales] With 'Point in time version of _hook__person__sales.';
    Comment Field [_hook__person__sales] With 'Hook for business_entity_id using keyset: person__sales__adventure_works.';
    Comment Field [_hook__territory__sales] With 'Hook for territory_id using keyset: territory__sales__adventure_works.';
    Comment Field [sales_person__business_entity_id] With 'Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID.';
    Comment Field [sales_person__bonus] With 'Bonus due if quota is met.';
    Comment Field [sales_person__commission_pct] With 'Commission percent received per sale.';
    Comment Field [sales_person__sales_ytd] With 'Sales total year to date.';
    Comment Field [sales_person__sales_last_year] With 'Sales total of previous year.';
    Comment Field [sales_person__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [sales_person__modified_date] With 'Date and time the record was last updated.';
    Comment Field [sales_person__territory_id] With 'Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.';
    Comment Field [sales_person__sales_quota] With 'Projected yearly sales.';
    Comment Field [sales_person__record_hash] With 'Hash of the record.';
    Comment Field [sales_person__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [sales_person__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [sales_person__record_version] With 'Version of the record.';
    Comment Field [sales_person__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [sales_person__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [sales_person__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__sales_persons] Into [$(val__qvd_path__dab)/frame__adventure_works__sales_persons.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__sales_persons];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__person__sales = Null();
Let var__hook__territory__sales = Null();
Let var__pit_hook__person__sales = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__sales_reasons
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_reasons.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__sales_reasons.qvd]);
Set var__hook__reference__sales_reason = 'reference__sales_reason__adventure_works|' & Text([sales_reason_id]);
Set var__record_version = Window(RecNo(), [sales_reason_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [sales_reason_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__sales_reason = $(var__hook__reference__sales_reason) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__sales_reasons]:
    Load
        Text($(var__pit_hook__reference__sales_reason)) As [_pit_hook__reference__sales_reason],
        Text($(var__hook__reference__sales_reason)) As [_hook__reference__sales_reason],
        Num#([sales_reason_id]) As [sales_reason__sales_reason_id],
        Text([name]) As [sales_reason__name],
        Text([reason_type]) As [sales_reason__reason_type],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [sales_reason__modified_date],
        Text([record_hash]) As [sales_reason__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [sales_reason__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_reason__record_updated_at],
        Num($(var__record_version)) As [sales_reason__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_reason__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_reason__record_valid_to],
        Num($(var__is_current_record)) As [sales_reason__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_reasons.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__sales_reasons] With 'Lookup table of customer purchase reasons.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__sales_reason] With 'Point in time version of _hook__reference__sales_reason.';
    Comment Field [_hook__reference__sales_reason] With 'Hook for sales_reason_id using keyset: reference__sales_reason__adventure_works.';
    Comment Field [sales_reason__sales_reason_id] With 'Primary key for SalesReason records.';
    Comment Field [sales_reason__name] With 'Sales reason description.';
    Comment Field [sales_reason__reason_type] With 'Category the sales reason belongs to.';
    Comment Field [sales_reason__modified_date] With 'Date and time the record was last updated.';
    Comment Field [sales_reason__record_hash] With 'Hash of the record.';
    Comment Field [sales_reason__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [sales_reason__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [sales_reason__record_version] With 'Version of the record.';
    Comment Field [sales_reason__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [sales_reason__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [sales_reason__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__sales_reasons] Into [$(val__qvd_path__dab)/frame__adventure_works__sales_reasons.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__sales_reasons];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__sales_reason = Null();
Let var__pit_hook__reference__sales_reason = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__sales_tax_rates
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_tax_rates.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__sales_tax_rates.qvd]);
Set var__hook__reference__sales_tax_rate = 'reference__sales_tax_rate__adventure_works|' & Text([sales_tax_rate_id]);
Set var__hook__reference__state_province = 'reference__state_province__adventure_works|' & Text([state_province_id]);
Set var__record_version = Window(RecNo(), [sales_tax_rate_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [sales_tax_rate_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__sales_tax_rate = $(var__hook__reference__sales_tax_rate) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__sales_tax_rates]:
    Load
        Text($(var__pit_hook__reference__sales_tax_rate)) As [_pit_hook__reference__sales_tax_rate],
        Text($(var__hook__reference__sales_tax_rate)) As [_hook__reference__sales_tax_rate],
        Text($(var__hook__reference__state_province)) As [_hook__reference__state_province],
        Num#([sales_tax_rate_id]) As [sales_tax_rate__sales_tax_rate_id],
        Num#([state_province_id]) As [sales_tax_rate__state_province_id],
        Num#([tax_type]) As [sales_tax_rate__tax_type],
        Num#([tax_rate]) As [sales_tax_rate__tax_rate],
        Text([name]) As [sales_tax_rate__name],
        Text([rowguid]) As [sales_tax_rate__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [sales_tax_rate__modified_date],
        Text([record_hash]) As [sales_tax_rate__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [sales_tax_rate__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_tax_rate__record_updated_at],
        Num($(var__record_version)) As [sales_tax_rate__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_tax_rate__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_tax_rate__record_valid_to],
        Num($(var__is_current_record)) As [sales_tax_rate__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_tax_rates.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__sales_tax_rates] With 'Tax rate lookup table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__sales_tax_rate] With 'Point in time version of _hook__reference__sales_tax_rate.';
    Comment Field [_hook__reference__sales_tax_rate] With 'Hook for sales_tax_rate_id using keyset: reference__sales_tax_rate__adventure_works.';
    Comment Field [_hook__reference__state_province] With 'Hook for state_province_id using keyset: reference__state_province__adventure_works.';
    Comment Field [sales_tax_rate__sales_tax_rate_id] With 'Primary key for SalesTaxRate records.';
    Comment Field [sales_tax_rate__state_province_id] With 'State, province, or country/region the sales tax applies to.';
    Comment Field [sales_tax_rate__tax_type] With '1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.';
    Comment Field [sales_tax_rate__tax_rate] With 'Tax rate amount.';
    Comment Field [sales_tax_rate__name] With 'Tax rate description.';
    Comment Field [sales_tax_rate__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [sales_tax_rate__modified_date] With 'Date and time the record was last updated.';
    Comment Field [sales_tax_rate__record_hash] With 'Hash of the record.';
    Comment Field [sales_tax_rate__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [sales_tax_rate__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [sales_tax_rate__record_version] With 'Version of the record.';
    Comment Field [sales_tax_rate__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [sales_tax_rate__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [sales_tax_rate__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__sales_tax_rates] Into [$(val__qvd_path__dab)/frame__adventure_works__sales_tax_rates.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__sales_tax_rates];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__sales_tax_rate = Null();
Let var__hook__reference__state_province = Null();
Let var__pit_hook__reference__sales_tax_rate = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__sales_territories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_territories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__sales_territories.qvd]);
Set var__hook__territory__sales = 'territory__sales__adventure_works|' & Text([territory_id]);
Set var__hook__reference__country_region = 'reference__country_region__adventure_works|' & Text([country_region_code]);
Set var__record_version = Window(RecNo(), [territory_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [territory_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__territory__sales = $(var__hook__territory__sales) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__sales_territories]:
    Load
        Text($(var__pit_hook__territory__sales)) As [_pit_hook__territory__sales],
        Text($(var__hook__territory__sales)) As [_hook__territory__sales],
        Text($(var__hook__reference__country_region)) As [_hook__reference__country_region],
        Num#([territory_id]) As [sales_territory__territory_id],
        Text([name]) As [sales_territory__name],
        Text([country_region_code]) As [sales_territory__country_region_code],
        Text([group]) As [sales_territory__group],
        Num#([sales_ytd]) As [sales_territory__sales_ytd],
        Num#([sales_last_year]) As [sales_territory__sales_last_year],
        Num#([cost_ytd]) As [sales_territory__cost_ytd],
        Num#([cost_last_year]) As [sales_territory__cost_last_year],
        Text([rowguid]) As [sales_territory__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [sales_territory__modified_date],
        Text([record_hash]) As [sales_territory__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [sales_territory__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_territory__record_updated_at],
        Num($(var__record_version)) As [sales_territory__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_territory__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_territory__record_valid_to],
        Num($(var__is_current_record)) As [sales_territory__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_territories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__sales_territories] With 'Sales territory lookup table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__territory__sales] With 'Point in time version of _hook__territory__sales.';
    Comment Field [_hook__territory__sales] With 'Hook for territory_id using keyset: territory__sales__adventure_works.';
    Comment Field [_hook__reference__country_region] With 'Hook for country_region_code using keyset: reference__country_region__adventure_works.';
    Comment Field [sales_territory__territory_id] With 'Primary key for SalesTerritory records.';
    Comment Field [sales_territory__name] With 'Sales territory description.';
    Comment Field [sales_territory__country_region_code] With 'ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.';
    Comment Field [sales_territory__group] With 'Geographic area to which the sales territory belongs.';
    Comment Field [sales_territory__sales_ytd] With 'Sales in the territory year to date.';
    Comment Field [sales_territory__sales_last_year] With 'Sales in the territory the previous year.';
    Comment Field [sales_territory__cost_ytd] With 'Business costs in the territory year to date.';
    Comment Field [sales_territory__cost_last_year] With 'Business costs in the territory the previous year.';
    Comment Field [sales_territory__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [sales_territory__modified_date] With 'Date and time the record was last updated.';
    Comment Field [sales_territory__record_hash] With 'Hash of the record.';
    Comment Field [sales_territory__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [sales_territory__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [sales_territory__record_version] With 'Version of the record.';
    Comment Field [sales_territory__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [sales_territory__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [sales_territory__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__sales_territories] Into [$(val__qvd_path__dab)/frame__adventure_works__sales_territories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__sales_territories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__territory__sales = Null();
Let var__hook__reference__country_region = Null();
Let var__pit_hook__territory__sales = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__sales_territory_histories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_territory_histories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__sales_territory_histories.qvd]);
Set var__hook__person__sales = 'person__sales__adventure_works|' & Text([business_entity_id]);
Set var__hook__territory__sales = 'territory__sales__adventure_works|' & Text([territory_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__person__sales = $(var__hook__person__sales) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__sales_territory_histories]:
    Load
        Text($(var__pit_hook__person__sales)) As [_pit_hook__person__sales],
        Text($(var__hook__person__sales)) As [_hook__person__sales],
        Text($(var__hook__territory__sales)) As [_hook__territory__sales],
        Num#([business_entity_id]) As [sales_territory_history__business_entity_id],
        Num#([territory_id]) As [sales_territory_history__territory_id],
        Date(Num#([start_date]), 'YYYY-MM-DD') As [sales_territory_history__start_date],
        Text([rowguid]) As [sales_territory_history__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [sales_territory_history__modified_date],
        Date(Num#([end_date]), 'YYYY-MM-DD') As [sales_territory_history__end_date],
        Text([record_hash]) As [sales_territory_history__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [sales_territory_history__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_territory_history__record_updated_at],
        Num($(var__record_version)) As [sales_territory_history__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_territory_history__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [sales_territory_history__record_valid_to],
        Num($(var__is_current_record)) As [sales_territory_history__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__sales_territory_histories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__sales_territory_histories] With 'Sales representative transfers to other sales territories.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__person__sales] With 'Point in time version of _hook__person__sales.';
    Comment Field [_hook__person__sales] With 'Hook for business_entity_id using keyset: person__sales__adventure_works.';
    Comment Field [_hook__territory__sales] With 'Hook for territory_id using keyset: territory__sales__adventure_works.';
    Comment Field [sales_territory_history__business_entity_id] With 'Primary key. The sales rep. Foreign key to SalesPerson.BusinessEntityID.';
    Comment Field [sales_territory_history__territory_id] With 'Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.';
    Comment Field [sales_territory_history__start_date] With 'Primary key. Date the sales representative started work in the territory.';
    Comment Field [sales_territory_history__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [sales_territory_history__modified_date] With 'Date and time the record was last updated.';
    Comment Field [sales_territory_history__end_date] With 'Date the sales representative left work in the territory.';
    Comment Field [sales_territory_history__record_hash] With 'Hash of the record.';
    Comment Field [sales_territory_history__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [sales_territory_history__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [sales_territory_history__record_version] With 'Version of the record.';
    Comment Field [sales_territory_history__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [sales_territory_history__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [sales_territory_history__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__sales_territory_histories] Into [$(val__qvd_path__dab)/frame__adventure_works__sales_territory_histories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__sales_territory_histories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__person__sales = Null();
Let var__hook__territory__sales = Null();
Let var__pit_hook__person__sales = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__scrap_reasons
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__scrap_reasons.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__scrap_reasons.qvd]);
Set var__hook__reference__scrap_reason = 'reference__scrap_reason__adventure_works|' & Text([scrap_reason_id]);
Set var__record_version = Window(RecNo(), [scrap_reason_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [scrap_reason_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__scrap_reason = $(var__hook__reference__scrap_reason) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__scrap_reasons]:
    Load
        Text($(var__pit_hook__reference__scrap_reason)) As [_pit_hook__reference__scrap_reason],
        Text($(var__hook__reference__scrap_reason)) As [_hook__reference__scrap_reason],
        Num#([scrap_reason_id]) As [scrap_reason__scrap_reason_id],
        Text([name]) As [scrap_reason__name],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [scrap_reason__modified_date],
        Text([record_hash]) As [scrap_reason__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [scrap_reason__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [scrap_reason__record_updated_at],
        Num($(var__record_version)) As [scrap_reason__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [scrap_reason__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [scrap_reason__record_valid_to],
        Num($(var__is_current_record)) As [scrap_reason__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__scrap_reasons.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__scrap_reasons] With 'Manufacturing failure reasons lookup table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__scrap_reason] With 'Point in time version of _hook__reference__scrap_reason.';
    Comment Field [_hook__reference__scrap_reason] With 'Hook for scrap_reason_id using keyset: reference__scrap_reason__adventure_works.';
    Comment Field [scrap_reason__scrap_reason_id] With 'Primary key for ScrapReason records.';
    Comment Field [scrap_reason__name] With 'Failure description.';
    Comment Field [scrap_reason__modified_date] With 'Date and time the record was last updated.';
    Comment Field [scrap_reason__record_hash] With 'Hash of the record.';
    Comment Field [scrap_reason__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [scrap_reason__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [scrap_reason__record_version] With 'Version of the record.';
    Comment Field [scrap_reason__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [scrap_reason__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [scrap_reason__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__scrap_reasons] Into [$(val__qvd_path__dab)/frame__adventure_works__scrap_reasons.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__scrap_reasons];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__scrap_reason = Null();
Let var__pit_hook__reference__scrap_reason = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__shifts
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__shifts.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__shifts.qvd]);
Set var__hook__reference__shift = 'reference__shift__adventure_works|' & Text([shift_id]);
Set var__record_version = Window(RecNo(), [shift_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [shift_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__shift = $(var__hook__reference__shift) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__shifts]:
    Load
        Text($(var__pit_hook__reference__shift)) As [_pit_hook__reference__shift],
        Text($(var__hook__reference__shift)) As [_hook__reference__shift],
        Num#([shift_id]) As [shift__shift_id],
        Text([name]) As [shift__name],
        Text([start_time]) As [shift__start_time],
        Text([end_time]) As [shift__end_time],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [shift__modified_date],
        Text([record_hash]) As [shift__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [shift__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [shift__record_updated_at],
        Num($(var__record_version)) As [shift__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [shift__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [shift__record_valid_to],
        Num($(var__is_current_record)) As [shift__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__shifts.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__shifts] With 'Work shift lookup table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__shift] With 'Point in time version of _hook__reference__shift.';
    Comment Field [_hook__reference__shift] With 'Hook for shift_id using keyset: reference__shift__adventure_works.';
    Comment Field [shift__shift_id] With 'Primary key for Shift records.';
    Comment Field [shift__name] With 'Shift description.';
    Comment Field [shift__start_time] With 'Shift start time. ISO duration.';
    Comment Field [shift__end_time] With 'Shift end time. ISO duration.';
    Comment Field [shift__modified_date] With 'Date and time the record was last updated.';
    Comment Field [shift__record_hash] With 'Hash of the record.';
    Comment Field [shift__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [shift__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [shift__record_version] With 'Version of the record.';
    Comment Field [shift__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [shift__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [shift__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__shifts] Into [$(val__qvd_path__dab)/frame__adventure_works__shifts.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__shifts];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__shift = Null();
Let var__pit_hook__reference__shift = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__ship_methods
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__ship_methods.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__ship_methods.qvd]);
Set var__hook__ship_method = 'ship_method__adventure_works|' & Text([ship_method_id]);
Set var__record_version = Window(RecNo(), [ship_method_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [ship_method_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__ship_method = $(var__hook__ship_method) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__ship_methods]:
    Load
        Text($(var__pit_hook__ship_method)) As [_pit_hook__ship_method],
        Text($(var__hook__ship_method)) As [_hook__ship_method],
        Num#([ship_method_id]) As [ship_method__ship_method_id],
        Text([name]) As [ship_method__name],
        Num#([ship_base]) As [ship_method__ship_base],
        Num#([ship_rate]) As [ship_method__ship_rate],
        Text([rowguid]) As [ship_method__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [ship_method__modified_date],
        Text([record_hash]) As [ship_method__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [ship_method__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [ship_method__record_updated_at],
        Num($(var__record_version)) As [ship_method__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [ship_method__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [ship_method__record_valid_to],
        Num($(var__is_current_record)) As [ship_method__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__ship_methods.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__ship_methods] With 'Shipping company lookup table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__ship_method] With 'Point in time version of _hook__ship_method.';
    Comment Field [_hook__ship_method] With 'Hook for ship_method_id using keyset: ship_method__adventure_works.';
    Comment Field [ship_method__ship_method_id] With 'Primary key for ShipMethod records.';
    Comment Field [ship_method__name] With 'Shipping company name.';
    Comment Field [ship_method__ship_base] With 'Minimum shipping charge.';
    Comment Field [ship_method__ship_rate] With 'Shipping charge per pound.';
    Comment Field [ship_method__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [ship_method__modified_date] With 'Date and time the record was last updated.';
    Comment Field [ship_method__record_hash] With 'Hash of the record.';
    Comment Field [ship_method__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [ship_method__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [ship_method__record_version] With 'Version of the record.';
    Comment Field [ship_method__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [ship_method__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [ship_method__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__ship_methods] Into [$(val__qvd_path__dab)/frame__adventure_works__ship_methods.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__ship_methods];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__ship_method = Null();
Let var__pit_hook__ship_method = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__shopping_cart_items
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__shopping_cart_items.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__shopping_cart_items.qvd]);
Set var__hook__shopping_cart_item = 'reference__adventure_works|' & Text([shopping_cart_item_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__record_version = Window(RecNo(), [shopping_cart_item_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [shopping_cart_item_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__shopping_cart_item = $(var__hook__shopping_cart_item) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__shopping_cart_items]:
    Load
        Text($(var__pit_hook__shopping_cart_item)) As [_pit_hook__shopping_cart_item],
        Text($(var__hook__shopping_cart_item)) As [_hook__shopping_cart_item],
        Text($(var__hook__product)) As [_hook__product],
        Num#([shopping_cart_item_id]) As [shopping_cart_item__shopping_cart_item_id],
        Text([shopping_cart_id]) As [shopping_cart_item__shopping_cart_id],
        Num#([quantity]) As [shopping_cart_item__quantity],
        Num#([product_id]) As [shopping_cart_item__product_id],
        Date(Num#([date_created]), 'YYYY-MM-DD') As [shopping_cart_item__date_created],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [shopping_cart_item__modified_date],
        Text([record_hash]) As [shopping_cart_item__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [shopping_cart_item__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [shopping_cart_item__record_updated_at],
        Num($(var__record_version)) As [shopping_cart_item__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [shopping_cart_item__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [shopping_cart_item__record_valid_to],
        Num($(var__is_current_record)) As [shopping_cart_item__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__shopping_cart_items.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__shopping_cart_items] With 'Contains online customer orders until the order is submitted or cancelled.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__shopping_cart_item] With 'Point in time version of _hook__shopping_cart_item.';
    Comment Field [_hook__shopping_cart_item] With 'Hook for shopping_cart_item_id using keyset: reference__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [shopping_cart_item__shopping_cart_item_id] With 'Primary key for ShoppingCartItem records.';
    Comment Field [shopping_cart_item__shopping_cart_id] With 'Shopping cart identification number.';
    Comment Field [shopping_cart_item__quantity] With 'Product quantity ordered.';
    Comment Field [shopping_cart_item__product_id] With 'Product ordered. Foreign key to Product.ProductID.';
    Comment Field [shopping_cart_item__date_created] With 'Date the time the record was created.';
    Comment Field [shopping_cart_item__modified_date] With 'Date and time the record was last updated.';
    Comment Field [shopping_cart_item__record_hash] With 'Hash of the record.';
    Comment Field [shopping_cart_item__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [shopping_cart_item__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [shopping_cart_item__record_version] With 'Version of the record.';
    Comment Field [shopping_cart_item__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [shopping_cart_item__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [shopping_cart_item__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__shopping_cart_items] Into [$(val__qvd_path__dab)/frame__adventure_works__shopping_cart_items.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__shopping_cart_items];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__shopping_cart_item = Null();
Let var__hook__product = Null();
Let var__pit_hook__shopping_cart_item = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__special_offers
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__special_offers.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__special_offers.qvd]);
Set var__hook__reference__special_offer = 'reference__special_offer__adventure_works|' & Text([special_offer_id]);
Set var__record_version = Window(RecNo(), [special_offer_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [special_offer_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__special_offer = $(var__hook__reference__special_offer) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__special_offers]:
    Load
        Text($(var__pit_hook__reference__special_offer)) As [_pit_hook__reference__special_offer],
        Text($(var__hook__reference__special_offer)) As [_hook__reference__special_offer],
        Num#([special_offer_id]) As [special_offer__special_offer_id],
        Text([description]) As [special_offer__description],
        Num#([discount_percentage]) As [special_offer__discount_percentage],
        Text([type]) As [special_offer__type],
        Text([category]) As [special_offer__category],
        Date(Num#([start_date]), 'YYYY-MM-DD') As [special_offer__start_date],
        Date(Num#([end_date]), 'YYYY-MM-DD') As [special_offer__end_date],
        Num#([minimum_quantity]) As [special_offer__minimum_quantity],
        Text([rowguid]) As [special_offer__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [special_offer__modified_date],
        Num#([maximum_quantity]) As [special_offer__maximum_quantity],
        Text([record_hash]) As [special_offer__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [special_offer__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [special_offer__record_updated_at],
        Num($(var__record_version)) As [special_offer__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [special_offer__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [special_offer__record_valid_to],
        Num($(var__is_current_record)) As [special_offer__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__special_offers.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__special_offers] With 'Sale discounts lookup table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__special_offer] With 'Point in time version of _hook__reference__special_offer.';
    Comment Field [_hook__reference__special_offer] With 'Hook for special_offer_id using keyset: reference__special_offer__adventure_works.';
    Comment Field [special_offer__special_offer_id] With 'Primary key for SpecialOffer records.';
    Comment Field [special_offer__description] With 'Discount description.';
    Comment Field [special_offer__discount_percentage] With 'Discount percentage.';
    Comment Field [special_offer__type] With 'Discount type category.';
    Comment Field [special_offer__category] With 'Group the discount applies to such as Reseller or Customer.';
    Comment Field [special_offer__start_date] With 'Discount start date.';
    Comment Field [special_offer__end_date] With 'Discount end date.';
    Comment Field [special_offer__minimum_quantity] With 'Minimum discount percent allowed.';
    Comment Field [special_offer__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [special_offer__modified_date] With 'Date and time the record was last updated.';
    Comment Field [special_offer__maximum_quantity] With 'Maximum discount percent allowed.';
    Comment Field [special_offer__record_hash] With 'Hash of the record.';
    Comment Field [special_offer__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [special_offer__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [special_offer__record_version] With 'Version of the record.';
    Comment Field [special_offer__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [special_offer__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [special_offer__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__special_offers] Into [$(val__qvd_path__dab)/frame__adventure_works__special_offers.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__special_offers];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__special_offer = Null();
Let var__pit_hook__reference__special_offer = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__state_provinces
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__state_provinces.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__state_provinces.qvd]);
Set var__hook__reference__state_province = 'reference__state_province__adventure_works|' & Text([state_province_id]);
Set var__hook__reference__country_region = 'reference__country_region__adventure_works|' & Text([country_region_code]);
Set var__hook__territory__sales = 'territory__sales__adventure_works|' & Text([territory_id]);
Set var__record_version = Window(RecNo(), [state_province_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [state_province_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__state_province = $(var__hook__reference__state_province) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__state_provinces]:
    Load
        Text($(var__pit_hook__reference__state_province)) As [_pit_hook__reference__state_province],
        Text($(var__hook__reference__state_province)) As [_hook__reference__state_province],
        Text($(var__hook__reference__country_region)) As [_hook__reference__country_region],
        Text($(var__hook__territory__sales)) As [_hook__territory__sales],
        Num#([state_province_id]) As [state_province__state_province_id],
        Text([state_province_code]) As [state_province__state_province_code],
        Text([country_region_code]) As [state_province__country_region_code],
        Text([is_only_state_province_flag]) As [state_province__is_only_state_province_flag],
        Text([name]) As [state_province__name],
        Num#([territory_id]) As [state_province__territory_id],
        Text([rowguid]) As [state_province__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [state_province__modified_date],
        Text([record_hash]) As [state_province__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [state_province__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [state_province__record_updated_at],
        Num($(var__record_version)) As [state_province__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [state_province__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [state_province__record_valid_to],
        Num($(var__is_current_record)) As [state_province__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__state_provinces.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__state_provinces] With 'State and province lookup table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__state_province] With 'Point in time version of _hook__reference__state_province.';
    Comment Field [_hook__reference__state_province] With 'Hook for state_province_id using keyset: reference__state_province__adventure_works.';
    Comment Field [_hook__reference__country_region] With 'Hook for country_region_code using keyset: reference__country_region__adventure_works.';
    Comment Field [_hook__territory__sales] With 'Hook for territory_id using keyset: territory__sales__adventure_works.';
    Comment Field [state_province__state_province_id] With 'Primary key for StateProvince records.';
    Comment Field [state_province__state_province_code] With 'ISO standard state or province code.';
    Comment Field [state_province__country_region_code] With 'ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.';
    Comment Field [state_province__is_only_state_province_flag] With '0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.';
    Comment Field [state_province__name] With 'State or province description.';
    Comment Field [state_province__territory_id] With 'ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.';
    Comment Field [state_province__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [state_province__modified_date] With 'Date and time the record was last updated.';
    Comment Field [state_province__record_hash] With 'Hash of the record.';
    Comment Field [state_province__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [state_province__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [state_province__record_version] With 'Version of the record.';
    Comment Field [state_province__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [state_province__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [state_province__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__state_provinces] Into [$(val__qvd_path__dab)/frame__adventure_works__state_provinces.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__state_provinces];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__state_province = Null();
Let var__hook__reference__country_region = Null();
Let var__hook__territory__sales = Null();
Let var__pit_hook__reference__state_province = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__stores
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__stores.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__stores.qvd]);
Set var__hook__store = 'store__adventure_works|' & Text([business_entity_id]);
Set var__hook__person__sales = 'person__sales__adventure_works|' & Text([sales_person_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__store = $(var__hook__store) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__stores]:
    Load
        Text($(var__pit_hook__store)) As [_pit_hook__store],
        Text($(var__hook__store)) As [_hook__store],
        Text($(var__hook__person__sales)) As [_hook__person__sales],
        Num#([business_entity_id]) As [store__business_entity_id],
        Text([name]) As [store__name],
        Num#([sales_person_id]) As [store__sales_person_id],
        Text([demographics]) As [store__demographics],
        Text([rowguid]) As [store__rowguid],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [store__modified_date],
        Text([record_hash]) As [store__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [store__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [store__record_updated_at],
        Num($(var__record_version)) As [store__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [store__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [store__record_valid_to],
        Num($(var__is_current_record)) As [store__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__stores.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__stores] With 'Customers (resellers) of Adventure Works products.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__store] With 'Point in time version of _hook__store.';
    Comment Field [_hook__store] With 'Hook for business_entity_id using keyset: store__adventure_works.';
    Comment Field [_hook__person__sales] With 'Hook for sales_person_id using keyset: person__sales__adventure_works.';
    Comment Field [store__business_entity_id] With 'Primary key. Foreign key to Customer.BusinessEntityID.';
    Comment Field [store__name] With 'Name of the store.';
    Comment Field [store__sales_person_id] With 'ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.';
    Comment Field [store__demographics] With 'Demographic information about the store such as the number of employees, annual sales and store type.';
    Comment Field [store__rowguid] With 'ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.';
    Comment Field [store__modified_date] With 'Date and time the record was last updated.';
    Comment Field [store__record_hash] With 'Hash of the record.';
    Comment Field [store__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [store__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [store__record_version] With 'Version of the record.';
    Comment Field [store__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [store__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [store__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__stores] Into [$(val__qvd_path__dab)/frame__adventure_works__stores.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__stores];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__store = Null();
Let var__hook__person__sales = Null();
Let var__pit_hook__store = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__transaction_histories
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__transaction_histories.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__transaction_histories.qvd]);
Set var__hook__transaction_history = 'product__adventure_works|' & Text([transaction_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__order__reference = 'order__adventure_works|' & Text([reference_order_id]);
Set var__record_version = Window(RecNo(), [transaction_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [transaction_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__transaction_history = $(var__hook__transaction_history) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__transaction_histories]:
    Load
        Text($(var__pit_hook__transaction_history)) As [_pit_hook__transaction_history],
        Text($(var__hook__transaction_history)) As [_hook__transaction_history],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__order__reference)) As [_hook__order__reference],
        Num#([transaction_id]) As [transaction_history__transaction_id],
        Num#([product_id]) As [transaction_history__product_id],
        Num#([reference_order_id]) As [transaction_history__reference_order_id],
        Num#([reference_order_line_id]) As [transaction_history__reference_order_line_id],
        Date(Num#([transaction_date]), 'YYYY-MM-DD') As [transaction_history__transaction_date],
        Text([transaction_type]) As [transaction_history__transaction_type],
        Num#([quantity]) As [transaction_history__quantity],
        Num#([actual_cost]) As [transaction_history__actual_cost],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [transaction_history__modified_date],
        Text([record_hash]) As [transaction_history__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [transaction_history__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [transaction_history__record_updated_at],
        Num($(var__record_version)) As [transaction_history__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [transaction_history__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [transaction_history__record_valid_to],
        Num($(var__is_current_record)) As [transaction_history__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__transaction_histories.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__transaction_histories] With 'Record of each purchase order, sales order, or work order transaction year to date.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__transaction_history] With 'Point in time version of _hook__transaction_history.';
    Comment Field [_hook__transaction_history] With 'Hook for transaction_id using keyset: product__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__order__reference] With 'Hook for reference_order_id using keyset: order__adventure_works.';
    Comment Field [transaction_history__transaction_id] With 'Primary key for TransactionHistory records.';
    Comment Field [transaction_history__product_id] With 'Product identification number. Foreign key to Product.ProductID.';
    Comment Field [transaction_history__reference_order_id] With 'Purchase order, sales order, or work order identification number.';
    Comment Field [transaction_history__reference_order_line_id] With 'Line number associated with the purchase order, sales order, or work order.';
    Comment Field [transaction_history__transaction_date] With 'Date and time of the transaction.';
    Comment Field [transaction_history__transaction_type] With 'W = WorkOrder, S = SalesOrder, P = PurchaseOrder.';
    Comment Field [transaction_history__quantity] With 'Product quantity.';
    Comment Field [transaction_history__actual_cost] With 'Product cost.';
    Comment Field [transaction_history__modified_date] With 'Date and time the record was last updated.';
    Comment Field [transaction_history__record_hash] With 'Hash of the record.';
    Comment Field [transaction_history__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [transaction_history__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [transaction_history__record_version] With 'Version of the record.';
    Comment Field [transaction_history__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [transaction_history__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [transaction_history__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__transaction_histories] Into [$(val__qvd_path__dab)/frame__adventure_works__transaction_histories.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__transaction_histories];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__transaction_history = Null();
Let var__hook__product = Null();
Let var__hook__order__reference = Null();
Let var__pit_hook__transaction_history = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__transaction_history_archives
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__transaction_history_archives.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__transaction_history_archives.qvd]);
Set var__hook__transaction_history_archive = 'product__adventure_works|' & Text([transaction_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__order__reference = 'order__adventure_works|' & Text([reference_order_id]);
Set var__record_version = Window(RecNo(), [transaction_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [transaction_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__transaction_history_archive = $(var__hook__transaction_history_archive) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__transaction_history_archives]:
    Load
        Text($(var__pit_hook__transaction_history_archive)) As [_pit_hook__transaction_history_archive],
        Text($(var__hook__transaction_history_archive)) As [_hook__transaction_history_archive],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__order__reference)) As [_hook__order__reference],
        Num#([transaction_id]) As [transaction_history_archive__transaction_id],
        Num#([product_id]) As [transaction_history_archive__product_id],
        Num#([reference_order_id]) As [transaction_history_archive__reference_order_id],
        Num#([reference_order_line_id]) As [transaction_history_archive__reference_order_line_id],
        Date(Num#([transaction_date]), 'YYYY-MM-DD') As [transaction_history_archive__transaction_date],
        Text([transaction_type]) As [transaction_history_archive__transaction_type],
        Num#([quantity]) As [transaction_history_archive__quantity],
        Num#([actual_cost]) As [transaction_history_archive__actual_cost],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [transaction_history_archive__modified_date],
        Text([record_hash]) As [transaction_history_archive__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [transaction_history_archive__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [transaction_history_archive__record_updated_at],
        Num($(var__record_version)) As [transaction_history_archive__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [transaction_history_archive__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [transaction_history_archive__record_valid_to],
        Num($(var__is_current_record)) As [transaction_history_archive__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__transaction_history_archives.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__transaction_history_archives] With 'Transactions for previous years.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__transaction_history_archive] With 'Point in time version of _hook__transaction_history_archive.';
    Comment Field [_hook__transaction_history_archive] With 'Hook for transaction_id using keyset: product__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__order__reference] With 'Hook for reference_order_id using keyset: order__adventure_works.';
    Comment Field [transaction_history_archive__transaction_id] With 'Primary key for TransactionHistoryArchive records.';
    Comment Field [transaction_history_archive__product_id] With 'Product identification number. Foreign key to Product.ProductID.';
    Comment Field [transaction_history_archive__reference_order_id] With 'Purchase order, sales order, or work order identification number.';
    Comment Field [transaction_history_archive__reference_order_line_id] With 'Line number associated with the purchase order, sales order, or work order.';
    Comment Field [transaction_history_archive__transaction_date] With 'Date and time of the transaction.';
    Comment Field [transaction_history_archive__transaction_type] With 'W = Work Order, S = Sales Order, P = Purchase Order.';
    Comment Field [transaction_history_archive__quantity] With 'Product quantity.';
    Comment Field [transaction_history_archive__actual_cost] With 'Product cost.';
    Comment Field [transaction_history_archive__modified_date] With 'Date and time the record was last updated.';
    Comment Field [transaction_history_archive__record_hash] With 'Hash of the record.';
    Comment Field [transaction_history_archive__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [transaction_history_archive__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [transaction_history_archive__record_version] With 'Version of the record.';
    Comment Field [transaction_history_archive__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [transaction_history_archive__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [transaction_history_archive__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__transaction_history_archives] Into [$(val__qvd_path__dab)/frame__adventure_works__transaction_history_archives.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__transaction_history_archives];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__transaction_history_archive = Null();
Let var__hook__product = Null();
Let var__hook__order__reference = Null();
Let var__pit_hook__transaction_history_archive = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__unit_measures
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__unit_measures.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__unit_measures.qvd]);
Set var__hook__reference__unit_measure = 'reference__unit_measure__adventure_works|' & Text([unit_measure_code]);
Set var__record_version = Window(RecNo(), [unit_measure_code], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [unit_measure_code], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__reference__unit_measure = $(var__hook__reference__unit_measure) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__unit_measures]:
    Load
        Text($(var__pit_hook__reference__unit_measure)) As [_pit_hook__reference__unit_measure],
        Text($(var__hook__reference__unit_measure)) As [_hook__reference__unit_measure],
        Text([unit_measure_code]) As [unit_measure__unit_measure_code],
        Text([name]) As [unit_measure__name],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [unit_measure__modified_date],
        Text([record_hash]) As [unit_measure__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [unit_measure__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [unit_measure__record_updated_at],
        Num($(var__record_version)) As [unit_measure__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [unit_measure__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [unit_measure__record_valid_to],
        Num($(var__is_current_record)) As [unit_measure__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__unit_measures.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__unit_measures] With 'Unit of measure lookup table.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__reference__unit_measure] With 'Point in time version of _hook__reference__unit_measure.';
    Comment Field [_hook__reference__unit_measure] With 'Hook for unit_measure_code using keyset: reference__unit_measure__adventure_works.';
    Comment Field [unit_measure__unit_measure_code] With 'Primary key.';
    Comment Field [unit_measure__name] With 'Unit of measure description.';
    Comment Field [unit_measure__modified_date] With 'Date and time the record was last updated.';
    Comment Field [unit_measure__record_hash] With 'Hash of the record.';
    Comment Field [unit_measure__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [unit_measure__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [unit_measure__record_version] With 'Version of the record.';
    Comment Field [unit_measure__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [unit_measure__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [unit_measure__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__unit_measures] Into [$(val__qvd_path__dab)/frame__adventure_works__unit_measures.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__unit_measures];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__reference__unit_measure = Null();
Let var__pit_hook__reference__unit_measure = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__vendors
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__vendors.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__vendors.qvd]);
Set var__hook__vendor = 'vendor__adventure_works|' & Text([business_entity_id]);
Set var__record_version = Window(RecNo(), [business_entity_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [business_entity_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__vendor = $(var__hook__vendor) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__vendors]:
    Load
        Text($(var__pit_hook__vendor)) As [_pit_hook__vendor],
        Text($(var__hook__vendor)) As [_hook__vendor],
        Num#([business_entity_id]) As [vendor__business_entity_id],
        Text([account_number]) As [vendor__account_number],
        Text([name]) As [vendor__name],
        Num#([credit_rating]) As [vendor__credit_rating],
        Text([preferred_vendor_status]) As [vendor__preferred_vendor_status],
        Text([active_flag]) As [vendor__active_flag],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [vendor__modified_date],
        Text([purchasing_web_service_url]) As [vendor__purchasing_web_service_url],
        Text([record_hash]) As [vendor__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [vendor__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [vendor__record_updated_at],
        Num($(var__record_version)) As [vendor__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [vendor__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [vendor__record_valid_to],
        Num($(var__is_current_record)) As [vendor__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__vendors.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__vendors] With 'Companies from whom Adventure Works Cycles purchases parts or other goods.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__vendor] With 'Point in time version of _hook__vendor.';
    Comment Field [_hook__vendor] With 'Hook for business_entity_id using keyset: vendor__adventure_works.';
    Comment Field [vendor__business_entity_id] With 'Primary key for Vendor records. Foreign key to BusinessEntity.BusinessEntityID.';
    Comment Field [vendor__account_number] With 'Vendor account (identification) number.';
    Comment Field [vendor__name] With 'Company name.';
    Comment Field [vendor__credit_rating] With '1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average.';
    Comment Field [vendor__preferred_vendor_status] With '0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.';
    Comment Field [vendor__active_flag] With '0 = Vendor no longer used. 1 = Vendor is actively used.';
    Comment Field [vendor__modified_date] With 'Date and time the record was last updated.';
    Comment Field [vendor__purchasing_web_service_url] With 'Vendor URL.';
    Comment Field [vendor__record_hash] With 'Hash of the record.';
    Comment Field [vendor__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [vendor__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [vendor__record_version] With 'Version of the record.';
    Comment Field [vendor__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [vendor__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [vendor__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__vendors] Into [$(val__qvd_path__dab)/frame__adventure_works__vendors.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__vendors];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__vendor = Null();
Let var__pit_hook__vendor = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__work_order_routings
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__work_order_routings.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__work_order_routings.qvd]);
Set var__hook__order_line__work = 'order_line__work__adventure_works|' & Text([operation_sequence]);
Set var__hook__order__work = 'order__work__adventure_works|' & Text([work_order_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__reference__location = 'reference__location__adventure_works|' & Text([location_id]);
Set var__hook__work_order_routing = $(var__hook__order_line__work) & '~' & $(var__hook__product) & '~' & $(var__hook__order__work);
Set var__record_version = Window(RecNo(), [operation_sequence], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [operation_sequence], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__work_order_routing = $(var__hook__work_order_routing) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__work_order_routings]:
    Load
        Text($(var__pit_hook__work_order_routing)) As [_pit_hook__work_order_routing],
        Text($(var__hook__work_order_routing)) As [_hook__work_order_routing],
        Text($(var__hook__order_line__work)) As [_hook__order_line__work],
        Text($(var__hook__order__work)) As [_hook__order__work],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__reference__location)) As [_hook__reference__location],
        Num#([work_order_id]) As [work_order_routing__work_order_id],
        Num#([product_id]) As [work_order_routing__product_id],
        Num#([operation_sequence]) As [work_order_routing__operation_sequence],
        Num#([location_id]) As [work_order_routing__location_id],
        Date(Num#([scheduled_start_date]), 'YYYY-MM-DD') As [work_order_routing__scheduled_start_date],
        Date(Num#([scheduled_end_date]), 'YYYY-MM-DD') As [work_order_routing__scheduled_end_date],
        Date(Num#([actual_start_date]), 'YYYY-MM-DD') As [work_order_routing__actual_start_date],
        Date(Num#([actual_end_date]), 'YYYY-MM-DD') As [work_order_routing__actual_end_date],
        Num#([actual_resource_hrs]) As [work_order_routing__actual_resource_hrs],
        Num#([planned_cost]) As [work_order_routing__planned_cost],
        Num#([actual_cost]) As [work_order_routing__actual_cost],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [work_order_routing__modified_date],
        Text([record_hash]) As [work_order_routing__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [work_order_routing__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [work_order_routing__record_updated_at],
        Num($(var__record_version)) As [work_order_routing__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [work_order_routing__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [work_order_routing__record_valid_to],
        Num($(var__is_current_record)) As [work_order_routing__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__work_order_routings.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__work_order_routings] With 'Work order details.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__work_order_routing] With 'Point in time version of _hook__work_order_routing.';
    Comment Field [_hook__work_order_routing] With 'Composite hook using _hook__order_line__work and _hook__product and _hook__order__work.';
    Comment Field [_hook__order_line__work] With 'Hook for operation_sequence using keyset: order_line__work__adventure_works.';
    Comment Field [_hook__order__work] With 'Hook for work_order_id using keyset: order__work__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__reference__location] With 'Hook for location_id using keyset: reference__location__adventure_works.';
    Comment Field [work_order_routing__work_order_id] With 'Primary key. Foreign key to WorkOrder.WorkOrderID.';
    Comment Field [work_order_routing__product_id] With 'Primary key. Foreign key to Product.ProductID.';
    Comment Field [work_order_routing__operation_sequence] With 'Primary key. Indicates the manufacturing process sequence.';
    Comment Field [work_order_routing__location_id] With 'Manufacturing location where the part is processed. Foreign key to Location.LocationID.';
    Comment Field [work_order_routing__scheduled_start_date] With 'Planned manufacturing start date.';
    Comment Field [work_order_routing__scheduled_end_date] With 'Planned manufacturing end date.';
    Comment Field [work_order_routing__actual_start_date] With 'Actual start date.';
    Comment Field [work_order_routing__actual_end_date] With 'Actual end date.';
    Comment Field [work_order_routing__actual_resource_hrs] With 'Number of manufacturing hours used.';
    Comment Field [work_order_routing__planned_cost] With 'Estimated manufacturing cost.';
    Comment Field [work_order_routing__actual_cost] With 'Actual manufacturing cost.';
    Comment Field [work_order_routing__modified_date] With 'Date and time the record was last updated.';
    Comment Field [work_order_routing__record_hash] With 'Hash of the record.';
    Comment Field [work_order_routing__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [work_order_routing__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [work_order_routing__record_version] With 'Version of the record.';
    Comment Field [work_order_routing__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [work_order_routing__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [work_order_routing__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__work_order_routings] Into [$(val__qvd_path__dab)/frame__adventure_works__work_order_routings.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__work_order_routings];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__work_order_routing = Null();
Let var__hook__order_line__work = Null();
Let var__hook__order__work = Null();
Let var__hook__product = Null();
Let var__hook__reference__location = Null();
Let var__pit_hook__work_order_routing = Null();

Trace
---------------------------------------------------------------
    Defining frame__adventure_works__work_orders
---------------------------------------------------------------
;
Trace Setting variables...;
Set var__source_qvd_create_time = QvdCreateTime([lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__work_orders.qvd]);
Set var__target_qvd_create_time = QvdCreateTime([$(val__qvd_path__dab)/frame__adventure_works__work_orders.qvd]);
Set var__hook__order__work = 'order__work__adventure_works|' & Text([work_order_id]);
Set var__hook__product = 'product__adventure_works|' & Text([product_id]);
Set var__hook__reference__scrap_reason = 'reference__scrap_reason__adventure_works|' & Text([scrap_reason_id]);
Set var__record_version = Window(RecNo(), [work_order_id], 'Asc', [record_loaded_at]);

Set var__valid_from = If(
        $(var__record_version) = 1,
        Timestamp#('1970-01-01 00:00:00.000', 'YYYY-MM-DD hh:mm:ss.fff'),
        [record_loaded_at]
    )
;

Set var__valid_to = Coalesce(
        Window([record_loaded_at], [work_order_id], 'Asc', [record_loaded_at], 1, 1, 1),
        Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff')
    )
;

Set var__is_current_record = If(
        $(var__valid_to) = Timestamp#('9999-12-31 23:59:59.999', 'YYYY-MM-DD hh:mm:ss.fff'),
        1,
        0
    )
;

Set var__record_updated_at = If(
        $(var__is_current_record),
        [record_loaded_at],
        $(var__valid_to)
    )
;

Set var__pit_hook__order__work = $(var__hook__order__work) & '~epoch__valid_from|' & Text($(var__valid_from));

If $(var__source_qvd_create_time) > $(var__target_qvd_create_time) Or IsNull($(var__target_qvd_create_time)) Then 

    Trace Source is newer, loading & transforming data...;
    [frame__adventure_works__work_orders]:
    Load
        Text($(var__pit_hook__order__work)) As [_pit_hook__order__work],
        Text($(var__hook__order__work)) As [_hook__order__work],
        Text($(var__hook__product)) As [_hook__product],
        Text($(var__hook__reference__scrap_reason)) As [_hook__reference__scrap_reason],
        Num#([work_order_id]) As [work_order__work_order_id],
        Num#([product_id]) As [work_order__product_id],
        Num#([order_qty]) As [work_order__order_qty],
        Num#([stocked_qty]) As [work_order__stocked_qty],
        Num#([scrapped_qty]) As [work_order__scrapped_qty],
        Date(Num#([start_date]), 'YYYY-MM-DD') As [work_order__start_date],
        Date(Num#([end_date]), 'YYYY-MM-DD') As [work_order__end_date],
        Date(Num#([due_date]), 'YYYY-MM-DD') As [work_order__due_date],
        Date(Num#([modified_date]), 'YYYY-MM-DD') As [work_order__modified_date],
        Num#([scrap_reason_id]) As [work_order__scrap_reason_id],
        Text([record_hash]) As [work_order__record_hash],
        Timestamp([record_loaded_at], 'YYYY-MM-DD hh:mm:ss.fff') As [work_order__record_loaded_at],
        Timestamp($(var__record_updated_at), 'YYYY-MM-DD hh:mm:ss.fff') As [work_order__record_updated_at],
        Num($(var__record_version)) As [work_order__record_version],
        Timestamp($(var__valid_from), 'YYYY-MM-DD hh:mm:ss.fff') As [work_order__record_valid_from],
        Timestamp($(var__valid_to), 'YYYY-MM-DD hh:mm:ss.fff') As [work_order__record_valid_to],
        Num($(var__is_current_record)) As [work_order__is_current_record]

    From
        [lib://DataFiles/Analytical Data Storage System/QVD/main/data_according_to_system/raw__adventure_works__work_orders.qvd] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [frame__adventure_works__work_orders] With 'Manufacturing work orders.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__order__work] With 'Point in time version of _hook__order__work.';
    Comment Field [_hook__order__work] With 'Hook for work_order_id using keyset: order__work__adventure_works.';
    Comment Field [_hook__product] With 'Hook for product_id using keyset: product__adventure_works.';
    Comment Field [_hook__reference__scrap_reason] With 'Hook for scrap_reason_id using keyset: reference__scrap_reason__adventure_works.';
    Comment Field [work_order__work_order_id] With 'Primary key for WorkOrder records.';
    Comment Field [work_order__product_id] With 'Product identification number. Foreign key to Product.ProductID.';
    Comment Field [work_order__order_qty] With 'Product quantity to build.';
    Comment Field [work_order__stocked_qty] With 'Quantity built and put in inventory.';
    Comment Field [work_order__scrapped_qty] With 'Quantity that failed inspection.';
    Comment Field [work_order__start_date] With 'Work order start date.';
    Comment Field [work_order__end_date] With 'Work order end date.';
    Comment Field [work_order__due_date] With 'Work order due date.';
    Comment Field [work_order__modified_date] With 'Date and time the record was last updated.';
    Comment Field [work_order__scrap_reason_id] With 'Reason for inspection failure.';
    Comment Field [work_order__record_hash] With 'Hash of the record.';
    Comment Field [work_order__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [work_order__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [work_order__record_version] With 'Version of the record.';
    Comment Field [work_order__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [work_order__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [work_order__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [frame__adventure_works__work_orders] Into [$(val__qvd_path__dab)/frame__adventure_works__work_orders.qvd] (qvd);

    Trace Dropping table...;
    Drop Table [frame__adventure_works__work_orders];

Else
    Trace Source QVD has not been updated since last load, skipping...;

End If

Trace Resetting variables...;
Let var__record_version = Null();
Let var__valid_from = Null();
Let var__valid_to = Null();
Let var__is_current_record = Null();
Let var__record_updated_at = Null();
Let var__hook__order__work = Null();
Let var__hook__product = Null();
Let var__hook__reference__scrap_reason = Null();
Let var__pit_hook__order__work = Null();
