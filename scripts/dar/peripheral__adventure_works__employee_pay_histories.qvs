Trace
---------------------------------------------------------------
    Defining peripheral__adventure_works__employee_pay_histories
---------------------------------------------------------------
;
Trace Setting variables...;
Let val__source_path = '$(val__qvd_path__dab)/frame__adventure_works__employee_pay_histories.qvd';
Let val__target_path = '$(val__qvd_path__dar)/peripheral__adventure_works__employee_pay_histories.qvd';
Let val__source_create_time = Timestamp(FileTime('$(val__source_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__target_create_time = Timestamp(FileTime('$(val__target_path)'), 'YYYY-MM-DD hh:mm:ss.fff');
Let val__source_is_newer = If('$(val__source_create_time)' > '$(val__target_create_time)', 1, 0);

Trace Checking if source is newer...;

If $(val__source_is_newer) = 1 Then 

    Trace Source is newer, loading & transforming data...;
    [peripheral__adventure_works__employee_pay_histories]:
    Load
        [_pit_hook__employee_pay_history],
        [employee_pay_history__business_entity_id],
        [employee_pay_history__rate_change_date],
        [employee_pay_history__rate],
        [employee_pay_history__pay_frequency],
        [employee_pay_history__modified_date],
        [employee_pay_history__record_hash],
        [employee_pay_history__record_loaded_at],
        [employee_pay_history__record_updated_at],
        [employee_pay_history__record_version],
        [employee_pay_history__record_valid_from],
        [employee_pay_history__record_valid_to],
        [employee_pay_history__is_current_record]

    From
        [$(val__source_path)] (qvd)
    ;

    Trace Commenting table...;
    Comment Table [peripheral__adventure_works__employee_pay_histories] With 'Employee pay history.';

    Trace Commenting fields...;
    Comment Field [_pit_hook__employee_pay_history] With 'Point in time version of _hook__employee_pay_history.';
    Comment Field [employee_pay_history__business_entity_id] With 'Employee identification number. Foreign key to Employee.BusinessEntityID.';
    Comment Field [employee_pay_history__rate_change_date] With 'Date the change in pay is effective.';
    Comment Field [employee_pay_history__rate] With 'Salary hourly rate.';
    Comment Field [employee_pay_history__pay_frequency] With '1 = Salary received monthly, 2 = Salary received biweekly.';
    Comment Field [employee_pay_history__modified_date] With 'Date and time the record was last updated.';
    Comment Field [employee_pay_history__record_hash] With 'Hash of the record.';
    Comment Field [employee_pay_history__record_loaded_at] With 'Date and time the record was loaded.';
    Comment Field [employee_pay_history__record_updated_at] With 'Date and time the record was last updated.';
    Comment Field [employee_pay_history__record_version] With 'Version of the record.';
    Comment Field [employee_pay_history__record_valid_from] With 'Date and time the record was valid from.';
    Comment Field [employee_pay_history__record_valid_to] With 'Date and time the record was valid to.';
    Comment Field [employee_pay_history__is_current_record] With '1 if the record is current, 0 otherwise.';

    Trace Storing data...;
    Store [peripheral__adventure_works__employee_pay_histories] Into [$(val__target_path)] (qvd);

    Trace Dropping table...;
    Drop Table [peripheral__adventure_works__employee_pay_histories];

Else
    Trace Source is older than target, skipping...;

End If

Trace Resetting variables...;
Let val__source_path = Null();
Let val__target_path = Null();
Let val__source_create_time = Null();
Let val__target_create_time = Null();
Let val__source_is_newer = Null();
